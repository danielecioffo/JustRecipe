Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.persistence;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport com.mongodb.ConnectionString;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.client.*;\nimport com.mongodb.client.model.Accumulators;\nimport com.mongodb.client.model.Aggregates;\nimport com.mongodb.client.model.Filters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.*;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport org.bson.Document;\nimport org.bson.codecs.configuration.CodecRegistry;\nimport org.bson.codecs.pojo.PojoCodecProvider;\nimport org.bson.conversions.Bson;\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\n\nimport static com.mongodb.client.model.Aggregates.*;\nimport static com.mongodb.client.model.Filters.eq;\nimport static com.mongodb.client.model.Projections.*;\nimport static com.mongodb.client.model.Projections.include;\nimport static com.mongodb.client.model.Sorts.descending;\nimport static org.bson.codecs.configuration.CodecRegistries.fromProviders;\nimport static org.bson.codecs.configuration.CodecRegistries.fromRegistries;\n\n/**\n * This class is used to communicate with MongoDB\n */\npublic class MongoDBDriver implements DatabaseDriver{\n    private static MongoDBDriver instance;\n\n    private MongoClient mongoClient;\n    private MongoDatabase database;\n    private MongoCollection collection;\n    private CodecRegistry pojoCodecRegistry;\n    private String ip;\n    private int port;\n    private String username;\n    private String password;\n    private String dbName;\n\n    public static MongoDBDriver getInstance() {\n        if (instance == null)\n        {\n            instance = new MongoDBDriver(Utils.readConfigurationParameters());\n        }\n        return instance;\n    }\n\n    /**\n     * Consumer function that prints the document in json format\n     */\n    private Consumer<Document> printDocuments = doc -> {\n        System.out.println(doc.toJson());\n    };\n\n    private MongoDBDriver (ConfigurationParameters configurationParameters)\n    {\n        this.ip = configurationParameters.getMongoIp();\n        this.port = configurationParameters.getMongoPort();\n        this.username = configurationParameters.getMongoUsername();\n        this.password = configurationParameters.getMongoPassword();\n        this.dbName = configurationParameters.getMongoDbName();\n        initConnection();\n        chooseCollection(\"recipe\");\n    }\n\n    /**\n     * Method that inits the MongoClient and choose the correct database\n     */\n    @Override\n    public void initConnection() {\n        ConnectionString connectionString;\n        if (!username.equals(\"\")) // if there are access rules\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + username + \":\" + password\n                    + \"@\" + ip + \":\" + port);\n        }\n        else // standard access\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + ip + \":\" + port);\n        }\n        mongoClient = MongoClients.create(connectionString);\n        database = mongoClient.getDatabase(dbName);\n        pojoCodecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(),\n                fromProviders(PojoCodecProvider.builder().automatic(true).build()));\n    }\n\n    /**\n     * Method used to close the connection\n     */\n    @Override\n    public void closeConnection() {\n        if (mongoClient != null)\n            mongoClient.close();\n    }\n\n    /**\n     * Method used to change the collection\n     * @param name  name of the new collection\n     */\n    public void chooseCollection(String name)\n    {\n        collection = database.getCollection(name);\n    }\n\n    public List<Recipe> getRecipesFromAuthorUsername(int howManySkip, int howMany, String username){\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        List<Document> results = new ArrayList<>();\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        Bson match = match(eq(\"authorUsername\", username));\n        results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the recipe given the title\n     * @param title     Title of the recipe\n     * @return          The recipe\n     */\n    public Recipe getRecipeFromTitle(String title){\n        Recipe recipe = null;\n        Gson gson = new Gson();\n        Type recipeType = new TypeToken<Recipe>(){}.getType();\n        Document myDoc =(Document) collection.find(eq(\"title\", title)).first();\n        recipe = gson.fromJson(gson.toJson(myDoc), recipeType);\n        return recipe;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes that contains in their title the title inserted by the user\n     * @param title         Title to check\n     * @param howManySkip   How many to skip\n     * @param howMany       How many recipe we want obtain\n     * @return              The list of the recipes that match the condition\n     */\n    public List<Recipe> searchRecipesFromTitle (String title, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Pattern pattern = Pattern.compile(\"^.*\" + title + \".*$\", Pattern.CASE_INSENSITIVE);\n        Bson match = Aggregates.match(Filters.regex(\"title\", pattern));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the most common categories (the top one used)\n     * @param howManySkip           How many to skip\n     * @param howManyCategories     How many category to consider in the rank\n     * @return                      The category ordered by the number of recipes in which it is used\n     */\n    public List<String> searchMostCommonRecipeCategories (int howManySkip, int howManyCategories)\n    {\n        List<String> mostCommonCategories = new ArrayList<>();\n        Bson unwind = unwind(\"$categories\");\n        Bson group = group(\"$categories\", Accumulators.sum(\"numberOfRecipes\", 1));\n        Bson project = project(fields(computed(\"categories\", \"$_id\"), excludeId(), include(\"numberOfRecipes\")));\n        Bson sort = sort(descending(\"numberOfRecipes\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howManyCategories);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(unwind, group, project, sort, skip, limit)).into(new ArrayList());\n\n        for (Document document: results)\n        {\n            mostCommonCategories.add(document.getString(\"categories\"));\n        }\n        return mostCommonCategories;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes of one category\n     * @param category      The category to consider\n     * @param howMany       How many recipes to return\n     * @return              List of the recipes\n     */\n    public List<Recipe> getRecipesOfCategory (String category, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson match = match(Filters.in(\"categories\", category));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(match, sort, limit)).into(new ArrayList());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function for searching all the comments, ordered by the creationTime (first the last)\n     * The list will be useful for the moderators\n     * @param howManySkip   How many to skip\n     * @param howMany       How many comments we want obtain\n     * @return              The list of the comments\n     */\n    public List<Comment> searchAllComments (int howManySkip, int howMany)\n    {\n        List<Comment> comments = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson unwind = unwind(\"$comments\");\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        MongoCursor<Document> iterator = (MongoCursor<Document>)\n                collection.aggregate(Arrays.asList(unwind, sort, skip, limit)).iterator();\n        while (iterator.hasNext())\n        {\n            Document document = (Document) iterator.next().get(\"comments\");\n            Comment comment = gson.fromJson(gson.toJson(document), Comment.class);\n            comments.add(comment);\n        }\n        return comments;\n    }\n\n    public void updateComments(String title, List<Comment> comments){\n        collection = collection.withCodecRegistry(pojoCodecRegistry);\n        Bson update = new Document(\"comments\", comments);\n        Bson updateOperation = new Document(\"$set\", update);\n        collection.updateOne(new Document(\"title\", title), updateOperation);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(revision 9f1d6534ab137def09b18f0eac1482f25cfb757b)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(date 1608413231673)
@@ -238,4 +238,8 @@
         Bson updateOperation = new Document("$set", update);
         collection.updateOne(new Document("title", title), updateOperation);
     }
+
+    public void deleteComment(Comment comment){
+//        Bson delete = new Document()
+    }
 }
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.controller;\n\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Session;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\n\n/**\n * Controller for the single comment\n */\npublic class CommentController {\n\n    @FXML private Label commentDate;\n    @FXML private Label commentUsername;\n    @FXML private TextArea commentTextArea;\n    @FXML private Button commentModifyButton;\n    @FXML private Button commentDeleteButton;\n    @FXML private Button commentSaveButton;\n\n    private Comment comment;\n    private Session appSession;\n\n\n    public void initialize ()\n    {\n        appSession = Session.getInstance();\n    }\n\n    public void setComment(Comment comment) {\n        this.comment = comment;\n        commentDate.setText(\"Written at: \" + Utils.fromDateToString(comment.getCreationTime()));\n        commentUsername.setText(\"By: \" + comment.getAuthorUsername());\n        commentTextArea.setText(comment.getText());\n\n        if((appSession.getLoggedUser().getRole()!=0) || (appSession.getLoggedUser().getUsername().equals(comment.getAuthorUsername())))\n            commentDeleteButton.setOnMouseClicked(mouseEvent -> Neo4jDriver.getInstance().deleteComment(comment.getAuthorUsername(),comment.getCreationTime()));\n        else\n            commentDeleteButton.setVisible(false);\n\n        if(appSession.getLoggedUser().getUsername().equals(comment.getAuthorUsername()))\n            commentModifyButton.setOnMouseClicked(mouseEvent -> Neo4jDriver.getInstance().editComment(comment.getAuthorUsername(),comment.getCreationTime()));\n        else\n            commentModifyButton.setVisible(false);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java	(revision 9f1d6534ab137def09b18f0eac1482f25cfb757b)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java	(date 1608412373033)
@@ -4,10 +4,14 @@
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Session;
 import it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;
 import it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;
+import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
+import javafx.scene.AccessibleAction;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
 import javafx.scene.control.TextArea;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.VBox;
 
 /**
  * Controller for the single comment
@@ -20,6 +24,7 @@
     @FXML private Button commentModifyButton;
     @FXML private Button commentDeleteButton;
     @FXML private Button commentSaveButton;
+    @FXML private VBox commentVBox;
 
     private Comment comment;
     private Session appSession;
@@ -28,6 +33,16 @@
     public void initialize ()
     {
         appSession = Session.getInstance();
+        commentDeleteButton.setOnAction(mouseEvent -> deleteButtonAction(mouseEvent));
+    }
+
+    public void deleteButtonAction(ActionEvent mouseEvent){
+//        System.out.println(appSession.getLoggedUser().getUsername());
+//        System.out.println(commentUsername.getText().substring(4));
+//        if(appSession.getLoggedUser().getRole() == 1 || appSession.getLoggedUser().getUsername().equals(commentUsername.getText().substring(4)))
+//            System.out.println("devo cancellare il commento in questione!");
+        commentVBox.getChildren().remove(0,commentVBox.getChildren().size());
+
     }
 
     public void setComment(Comment comment) {
Index: src/main/resources/comment.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.TextArea?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.VBox?>\n\n<VBox maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefWidth=\"600.0\" style=\"-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;\" xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController\">\n   <children>\n      <AnchorPane prefHeight=\"41.0\" prefWidth=\"600.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <Label fx:id=\"commentDate\" layoutX=\"26.0\" layoutY=\"12.0\" text=\"Written at: Tue Feb 25 17:11:26 \" />\n            <Label fx:id=\"commentUsername\" alignment=\"CENTER_RIGHT\" layoutX=\"456.0\" layoutY=\"12.0\" text=\"By: Username\" textAlignment=\"RIGHT\" />\n         </children>\n         <VBox.margin>\n            <Insets />\n         </VBox.margin>\n      </AnchorPane>\n      <Pane prefWidth=\"200.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <TextArea fx:id=\"commentTextArea\" layoutX=\"26.0\" layoutY=\"7.0\" prefHeight=\"89.0\" prefWidth=\"547.0\" style=\"-fx-focus-color: orange;\" text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.&#10; \" wrapText=\"true\" />\n         </children>\n      </Pane>\n      <AnchorPane prefHeight=\"69.0\" prefWidth=\"600.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <Button fx:id=\"commentModifyButton\" layoutX=\"27.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" text=\"Modify\" />\n            <Button fx:id=\"commentDeleteButton\" layoutX=\"522.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" text=\"Delete\" />\n            <Button fx:id=\"commentSaveButton\" layoutX=\"90.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"54.0\" text=\"Save\" />\n         </children>\n      </AnchorPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/comment.fxml b/src/main/resources/comment.fxml
--- a/src/main/resources/comment.fxml	(revision 9f1d6534ab137def09b18f0eac1482f25cfb757b)
+++ b/src/main/resources/comment.fxml	(date 1608411581019)
@@ -8,7 +8,7 @@
 <?import javafx.scene.layout.Pane?>
 <?import javafx.scene.layout.VBox?>
 
-<VBox maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefWidth="600.0" style="-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController">
+<VBox fx:id="commentVBox" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefWidth="600.0" style="-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController">
    <children>
       <AnchorPane prefHeight="41.0" prefWidth="600.0" VBox.vgrow="ALWAYS">
          <children>
