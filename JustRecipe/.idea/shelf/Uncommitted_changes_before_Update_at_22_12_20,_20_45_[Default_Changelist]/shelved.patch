Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/AdministrationPageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.controller;\n\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Session;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.User;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.MongoDBDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.ComboBox;\nimport javafx.scene.control.TextField;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.VBox;\n\nimport java.util.List;\n\npublic class AdministrationPageController {\n    private Neo4jDriver neo4jDriver;\n    private MongoDBDriver mongoDBDriver;\n    private Session appSession;\n    @FXML private ImageView homepageIcon;\n    @FXML private ImageView profilePageIcon;\n    @FXML private ImageView logoutPic;\n    @FXML private ImageView discoveryImg;\n    @FXML private Button allComments;\n    @FXML private Button allRecipes;\n    @FXML private Button allUsers;\n    @FXML private Button searchButton;\n    @FXML private ComboBox chooseQuery;\n    @FXML private TextField searchBar;\n    @FXML private Button nextButton;\n    @FXML private Button previousButton;\n    @FXML private VBox adminPageBox;\n\n    private int page; // number of page (at the beginning at 0), increase with nextButton and decrease with previousButton\n    private final int HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW = 20;\n    private final int HOW_MANY_USER_SNAPSHOT_TO_SHOW = 20;\n    private final int HOW_MANY_MOST_COMMON_CATEGORIES_TO_SHOW = 5;\n    private final int HOW_MANY_SNAPSHOT_FOR_EACH_COMMON_CATEGORY = 4;\n    private final int HOW_MANY_COMMENTS_TO_SHOW = 20;\n\n    public void initialize()\n    {\n        neo4jDriver = Neo4jDriver.getInstance();\n        mongoDBDriver = MongoDBDriver.getInstance();\n        appSession = Session.getInstance();\n\n        // Setting the menu'\n        homepageIcon.setOnMouseClicked(mouseEvent -> clickOnHomepageToChangePage(mouseEvent));\n        profilePageIcon.setOnMouseClicked(mouseEvent -> clickOnProfImgToChangePage(mouseEvent));\n        logoutPic.setOnMouseClicked(mouseEvent -> clickOnLogoutImg(mouseEvent));\n        discoveryImg.setOnMouseClicked(mouseEvent -> clickOnDiscImgtoChangePage(mouseEvent));\n\n        // Setting the ComboBox\n        ObservableList<String> entries =\n                FXCollections.observableArrayList(\n                        \"User username\",\n                        \"User full name\",\n                        \"Recipe title\"\n                );\n        chooseQuery.setItems(entries);\n        chooseQuery.setPromptText(\"Click to choose\");\n        chooseQuery.setOnAction(event -> clickOnComboBox());\n\n        // Set the queries that can be called from buttons\n        allComments.setOnMouseClicked(mouseEvent -> clickOnAllComments());\n        allRecipes.setOnMouseClicked(mouseEvent -> clickOnAllRecipes());\n        allUsers.setOnMouseClicked(mouseEvent -> clickOnAllUsers());\n\n        // Set buttons available to moderator/administrator\n        if(appSession.getLoggedUser().getRole()==1) // moderator\n        {\n            allRecipes.setDisable(true);\n            allUsers.setDisable(true);\n        }\n\n        // Search button\n        searchButton.setOnMouseClicked(mouseEvent -> clickOnSearchButton());\n\n        // Previous and next button behaviour\n        page = 0;\n        nextButton.setOnMouseClicked(mouseEvent -> clickOnNext(mouseEvent));\n        previousButton.setOnMouseClicked(mouseEvent -> clickOnPrevious(mouseEvent));\n        previousButton.setVisible(false); //in the first page it is not visible\n    }\n\n    /**\n     * Handle the click on the search button\n     */\n    private  void clickOnSearchButton()\n    {\n        Utils.removeAllFromPane(adminPageBox);\n        if (String.valueOf(chooseQuery.getValue()).equals(\"Recipe title\"))\n        {\n            List<Recipe> recipes = mongoDBDriver.searchRecipesFromTitle(searchBar.getText(),\n                    HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW*page, HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW);\n            Utils.addRecipesSnap(adminPageBox, recipes);\n        }\n        else if (String.valueOf(chooseQuery.getValue()).equals(\"User username\"))\n        {\n            List<User> users = neo4jDriver.searchUserByUsername(HOW_MANY_USER_SNAPSHOT_TO_SHOW*page,\n                    HOW_MANY_USER_SNAPSHOT_TO_SHOW, searchBar.getText());\n            Utils.addUsersSnap(adminPageBox, users);\n        }\n        else if (String.valueOf(chooseQuery.getValue()).equals(\"User full name\"))\n        {\n            List<User> users = neo4jDriver.searchUserByFullName(HOW_MANY_USER_SNAPSHOT_TO_SHOW*page,\n                    HOW_MANY_USER_SNAPSHOT_TO_SHOW, searchBar.getText());\n            Utils.addUsersSnap(adminPageBox, users);\n        }\n    }\n\n    /**\n     * Handle the click of an option of the ComboBox\n     */\n    private void clickOnComboBox()\n    {\n        page = 0;\n        Utils.removeAllFromPane(adminPageBox);\n    }\n\n    /**\n     * Show all the users of the db\n     */\n    private void clickOnAllUsers()\n    {\n\n    }\n\n    /**\n     * Show all the recipes of the db\n     */\n    private void clickOnAllRecipes()\n    {\n\n    }\n\n    /**\n     * Show the comments sorted by creation time\n     */\n    private void clickOnAllComments()\n    {\n        List<Comment> comments = mongoDBDriver.searchAllComments(\n                HOW_MANY_COMMENTS_TO_SHOW*page, HOW_MANY_COMMENTS_TO_SHOW);\n        Utils.showComments(adminPageBox, comments, new String());\n        //new String where should be recipeName,which here is useless\n    }\n\n    /**\n     * Function that let the navigation into the ui ---> homepage\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnHomepageToChangePage(MouseEvent mouseEvent){\n        try{\n            HomePageController homePageController = (HomePageController)\n                    Utils.changeScene(\"/homepage.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"homePageController is null!!!!\");}\n    }\n\n    /**\n     * Function that let the logout action, by going into the welcome page\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnLogoutImg(MouseEvent mouseEvent){\n        try {\n            WelcomePageController welcomePageController = (WelcomePageController)\n                    Utils.changeScene(\"/welcome.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"profilePageController is null!!!!\");}\n    }\n\n    /**\n     * Function that let the navigation into the ui ---> profilePage\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnProfImgToChangePage(MouseEvent mouseEvent){\n        try {\n            ProfilePageController profilePageController = (ProfilePageController)\n                    Utils.changeScene(\"/profilePage.fxml\", mouseEvent);\n            profilePageController.setProfile(Session.getInstance().getLoggedUser());\n        }catch (NullPointerException n){System.out.println(\"profilePageController is null!!!!\");}\n    }\n\n    /**\n     * Function that let the navigation into the ui ---> discoveryPage\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnDiscImgtoChangePage(MouseEvent mouseEvent){\n        try{\n            DiscoveryPageController discoveryPageController = (DiscoveryPageController)\n                    Utils.changeScene(\"/discoveryPage.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"homePageController is null!!!!\");}\n    }\n\n    /**\n     * Handler for the next button\n     * @param mouseEvent    Events that leads to this function\n     */\n    private void clickOnNext(MouseEvent mouseEvent) {\n        page++;\n        if (page > 0)\n            previousButton.setVisible(true);\n        searchButton.fire(); // simulate the click of the button\n    }\n\n    /**\n     * Handler for the previous button\n     * @param mouseEvent    Events that leads to this function\n     */\n    private void clickOnPrevious(MouseEvent mouseEvent) {\n        page--;\n        if (page < 1)\n            previousButton.setVisible(false);\n        searchButton.fire(); // simulate the click of the button\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/AdministrationPageController.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/AdministrationPageController.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/AdministrationPageController.java	(revision 8f4118342b8f88f2b20829217374cdcf3c31a033)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/AdministrationPageController.java	(date 1608666142692)
@@ -147,7 +147,7 @@
     {
         List<Comment> comments = mongoDBDriver.searchAllComments(
                 HOW_MANY_COMMENTS_TO_SHOW*page, HOW_MANY_COMMENTS_TO_SHOW);
-        Utils.showComments(adminPageBox, comments, new String());
+        Utils.showComments(adminPageBox, comments, new Recipe());
         //new String where should be recipeName,which here is useless
     }
 
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.persistence;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.ObjectWriter;\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport com.mongodb.ConnectionString;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.client.*;\nimport com.mongodb.client.model.*;\nimport com.mongodb.client.result.UpdateResult;\nimport it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.*;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport org.bson.BsonDocument;\nimport org.bson.Document;\nimport org.bson.codecs.configuration.CodecRegistry;\nimport org.bson.codecs.pojo.PojoCodecProvider;\nimport org.bson.conversions.Bson;\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\n\nimport static com.mongodb.client.model.Aggregates.*;\nimport static com.mongodb.client.model.Filters.eq;\nimport static com.mongodb.client.model.Projections.*;\nimport static com.mongodb.client.model.Projections.include;\nimport static com.mongodb.client.model.Sorts.ascending;\nimport static com.mongodb.client.model.Sorts.descending;\nimport static org.bson.codecs.configuration.CodecRegistries.fromProviders;\nimport static org.bson.codecs.configuration.CodecRegistries.fromRegistries;\n\n/**\n * This class is used to communicate with MongoDB\n */\npublic class MongoDBDriver implements DatabaseDriver{\n    private static MongoDBDriver instance;\n\n    private MongoClient mongoClient;\n    private MongoDatabase database;\n    private MongoCollection collection;\n    private CodecRegistry pojoCodecRegistry;\n    private String ip;\n    private int port;\n    private String username;\n    private String password;\n    private String dbName;\n\n    public static MongoDBDriver getInstance() {\n        if (instance == null)\n        {\n            instance = new MongoDBDriver(Utils.readConfigurationParameters());\n        }\n        return instance;\n    }\n\n    /**\n     * Consumer function that prints the document in json format\n     */\n    private Consumer<Document> printDocuments = doc -> {\n        System.out.println(doc.toJson());\n    };\n\n    private MongoDBDriver (ConfigurationParameters configurationParameters)\n    {\n        this.ip = configurationParameters.getMongoIp();\n        this.port = configurationParameters.getMongoPort();\n        this.username = configurationParameters.getMongoUsername();\n        this.password = configurationParameters.getMongoPassword();\n        this.dbName = configurationParameters.getMongoDbName();\n        initConnection();\n        chooseCollection(\"recipes\");\n    }\n\n    /**\n     * Method that inits the MongoClient and choose the correct database\n     */\n    @Override\n    public void initConnection() {\n        ConnectionString connectionString;\n        if (!username.equals(\"\")) // if there are access rules\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + username + \":\" + password\n                    + \"@\" + ip + \":\" + port);\n        }\n        else // standard access\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + ip + \":\" + port);\n        }\n        mongoClient = MongoClients.create(connectionString);\n        database = mongoClient.getDatabase(dbName);\n        pojoCodecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(),\n                fromProviders(PojoCodecProvider.builder().automatic(true).build()));\n    }\n\n    /**\n     * Method used to close the connection\n     */\n    @Override\n    public void closeConnection() {\n        if (mongoClient != null)\n            mongoClient.close();\n    }\n\n    /**\n     * Add a new recipe in MongoDB\n     * @param r The object Recipe which contains all the necessary information about it\n     */\n    public void addRecipe(Recipe r)\n    {\n        Document doc = new Document(\"title\",r.getTitle())\n                .append(\"instructions\",r.getInstructions())\n                .append(\"ingredients\",r.getIngredients());\n        // Optional fields\n        if(!r.getCategories().isEmpty())\n            doc.append(\"categories\",r.getCategories());\n        if(r.getCalories()!=-1)\n            doc.append(\"calories\",r.getCalories());\n        if(r.getFat()!=-1)\n            doc.append(\"fat\",r.getFat());\n        if(r.getProtein()!=-1)\n            doc.append(\"protein\",r.getProtein());\n        if(r.getCarbs()!=-1)\n            doc.append(\"carbs\",r.getCarbs());\n        // Automatic fields\n        doc.append(\"creationTime\",new Date(r.getCreationTime().getTime()))\n                .append(\"authorUsername\",r.getAuthorUsername());\n        // Other option field\n        if(!r.getPicture().isEmpty())\n            doc.append(\"picture\",r.getPicture());\n\n        collection.insertOne(doc);\n    }\n    /**\n     * Method used to change the collection\n     * @param name  name of the new collection\n     */\n    public void chooseCollection(String name)\n    {\n        collection = database.getCollection(name);\n    }\n\n    public List<Recipe> getRecipesFromAuthorUsername(int howManySkip, int howMany, String username){\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        List<Document> results = new ArrayList<>();\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        Bson match = match(eq(\"authorUsername\", username));\n        results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the recipe given the title\n     * @param title     Title of the recipe\n     * @return          The recipe\n     */\n    public Recipe getRecipeFromTitle(String title){\n        Recipe recipe = null;\n        Gson gson = new Gson();\n        Type recipeType = new TypeToken<Recipe>(){}.getType();\n        Document myDoc =(Document) collection.find(eq(\"title\", title)).first();\n        recipe = gson.fromJson(gson.toJson(myDoc), recipeType);\n        return recipe;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes that contains in their title the title inserted by the user\n     * @param title         Title to check\n     * @param howManySkip   How many to skip\n     * @param howMany       How many recipe we want obtain\n     * @return              The list of the recipes that match the condition\n     */\n    public List<Recipe> searchRecipesFromTitle (String title, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Pattern pattern = Pattern.compile(\"^.*\" + title + \".*$\", Pattern.CASE_INSENSITIVE);\n        Bson match = Aggregates.match(Filters.regex(\"title\", pattern));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that returns a list of recipes that contains the category passed (or one piece of that)\n     * @param category          Category to search\n     * @param howManySkip       How many to skip\n     * @param howMany           How many to obtain\n     * @return                  The list of recipes\n     */\n    public List<Recipe> searchRecipesFromCategory (String category, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Pattern pattern = Pattern.compile(\"^.*\" + category + \".*$\", Pattern.CASE_INSENSITIVE);\n        Bson match = match(Filters.regex(\"categories\", pattern));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that returns the recipes that contains the ingredients passed as argument\n     * @param ingredients       Ingredients to check\n     * @param howManySkip       How many recipe to skip\n     * @param howMany           How many recipe to obtain\n     * @return                  List of recipes\n     */\n    public List<Recipe> searchRecipesFromIngredients (List<String> ingredients, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        List<Bson> bsons = new ArrayList<Bson>();\n        for (String ingredient: ingredients)\n        {\n            Pattern pattern = Pattern.compile(\"^.*\" + ingredient + \".*$\", Pattern.CASE_INSENSITIVE);\n            bsons.add(match(Filters.regex(\"ingredients\", pattern)));\n        }\n        bsons.add(sort(descending(\"creationTime\")));\n        bsons.add(skip(howManySkip));\n        bsons.add(limit(howMany));\n        List<Document> results = (List<Document>) collection.aggregate(bsons)\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the most common categories (the top one used)\n     * @param howManySkip           How many to skip\n     * @param howManyCategories     How many category to consider in the rank\n     * @return                      The category ordered by the number of recipes in which it is used\n     */\n    public List<String> searchMostCommonRecipeCategories (int howManySkip, int howManyCategories)\n    {\n        List<String> mostCommonCategories = new ArrayList<>();\n        Bson unwind = unwind(\"$categories\");\n        Bson group = group(\"$categories\", Accumulators.sum(\"numberOfRecipes\", 1));\n        Bson project = project(fields(computed(\"category\", \"$_id\"), excludeId(), include(\"numberOfRecipes\")));\n        Bson sort = sort(descending(\"numberOfRecipes\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howManyCategories);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(unwind, group, project, sort, skip, limit)).into(new ArrayList());\n\n        for (Document document: results)\n        {\n            mostCommonCategories.add(document.getString(\"category\"));\n        }\n        return mostCommonCategories;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes of one category\n     * @param category      The category to consider\n     * @param howMany       How many recipes to return\n     * @return              List of the recipes\n     */\n    public List<Recipe> getRecipesOfCategory (String category, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson match = match(Filters.in(\"categories\", category));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(match, sort, limit)).into(new ArrayList());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function for searching all the comments, ordered by the creationTime (first the last)\n     * The list will be useful for the moderators\n     * @param howManySkip   How many to skip\n     * @param howMany       How many comments we want obtain\n     * @return              The list of the comments\n     */\n    public List<Comment> searchAllComments (int howManySkip, int howMany)\n    {\n        List<Comment> comments = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson unwind = unwind(\"$comments\");\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        MongoCursor<Document> iterator = (MongoCursor<Document>)\n                collection.aggregate(Arrays.asList(unwind, sort, skip, limit)).iterator();\n        while (iterator.hasNext())\n        {\n            Document document = (Document) iterator.next().get(\"comments\");\n            Comment comment = gson.fromJson(gson.toJson(document), Comment.class);\n            comments.add(comment);\n        }\n        return comments;\n    }\n\n    /**\n     * Function who updates the comments field in recipe\n     * @param title     recipe Title\n     * @param comments  list of comments who will updates the recipe fields\n     */\n    public void updateComments(String title, List<Comment> comments){\n        collection = collection.withCodecRegistry(pojoCodecRegistry);\n        Bson update = new Document(\"comments\", comments);\n        Bson updateOperation = new Document(\"$set\", update);\n        collection.updateOne(new Document(\"title\", title), updateOperation);\n    }\n\n    /**\n     * Function who removes a comment element from a comment view and calls the updateComments to update\n     * the recipe into mongo\n     * @param recipe     recipe name to modify\n     * @param comment   comment to delete\n     */\n    public void deleteComment(Recipe recipe, Comment comment){\n        List<Comment> comments = recipe.getComments();\n        int i=0;\n        int k=0;\n        for (Comment c: comments) {\n            if(c.getCreationTime().equals(comment.getCreationTime()) &&\n                    c.getAuthorUsername().equals(comment.getAuthorUsername())){\n                k=i;\n                break;\n            }\n            i++;\n        }\n        comments.remove(k);\n        updateComments(recipe.getTitle(), comments);\n    }\n\n    /**\n     * Gets all the comments of a recipe, modify the one who has to be changed and make an upload\n     * @param recipe\n     * @param comment\n     */\n    public void modifyComment(Recipe recipe, Comment comment){\n        List<Comment> comments = recipe.getComments();\n        int i=0;\n        for (Comment c: comments\n             ) {\n            if(c.getAuthorUsername().equals(comment.getAuthorUsername()) && c.getCreationTime().equals(\n                    comment.getCreationTime())){\n                comments.set(i, comment);\n                break;\n            }\n            i++;\n        }\n        updateComments(recipe.getTitle(), comments);\n    }\n\n    /**\n     * Function who adds a comment element to a list, with all the others comments for the recipe then updates the list\n     * calling the updateComments\n     * @param recipe     recipe  to modify\n     * @param comment   comment to add\n     */\n    public void addComment(Recipe recipe, Comment comment){\n        List<Comment> comments = recipe.getComments();\n        comments.add(comment);\n        System.out.println(comments);\n        updateComments(recipe.getTitle(), comments);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(revision 8f4118342b8f88f2b20829217374cdcf3c31a033)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(date 1608666267859)
@@ -378,7 +378,6 @@
     public void addComment(Recipe recipe, Comment comment){
         List<Comment> comments = recipe.getComments();
         comments.add(comment);
-        System.out.println(comments);
         updateComments(recipe.getTitle(), comments);
     }
 }
