Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/model/Recipe.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.model;\n\nimport com.google.gson.annotations.SerializedName;\nimport org.bson.types.ObjectId;\n\nimport java.beans.Transient;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\npublic class Recipe {\n    private String title;\n    private String instructions;\n    private List<String> ingredients;\n    private List<String> categories;\n    private int calories;\n    private int fat;\n    private int protein;\n    private int carbs;\n    private Date creationTime;\n    private String picture;\n    private String authorUsername;\n    private List<Comment> comments;\n\n    //Blank constructor\n    public Recipe(){}\n\n    //Constructor\n    public Recipe(String title, String instructions, List<String> ingredients, List<String> categories,\n                  int calories, int fat, int protein, int carbs, Date creationTime, String picture, String authorUsername,\n                  List<Comment> comments)\n    {\n        this.title = title;\n        this.picture = picture;\n        this.instructions = instructions;\n        this.ingredients = ingredients;\n        this.categories = categories;\n        this.creationTime = creationTime;\n        this.calories = calories;\n        this.fat = fat;\n        this.protein = protein;\n        this.carbs = carbs;\n        this.authorUsername = authorUsername;\n        this.comments = comments;\n    }\n\n    public Recipe(String title, String instructions, List<String> ingredients, List<String> categories,\n                  int calories, int fat, int protein, int carbs, Date creationTime, String picture,\n                  String authorUsername)\n    {\n        this( title, instructions, ingredients, categories, calories, fat, protein, carbs,\n                creationTime, picture, authorUsername, new ArrayList<Comment>());\n    }\n\n\n    //Getters\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getPicture() {\n        return picture;\n    }\n\n    public String getInstructions() {\n        return instructions;\n    }\n\n    public List<String> getIngredients() {\n        return ingredients;\n    }\n\n    public List<String> getCategories() {\n        return categories;\n    }\n\n    public Date getCreationTime() {\n        return creationTime;\n    }\n\n    public int getCalories() {\n        return calories;\n    }\n\n    public int getFat() {\n        return fat;\n    }\n\n    public int getProtein() {\n        return protein;\n    }\n\n    public int getCarbs() {\n        return carbs;\n    }\n\n    public String getAuthorUsername() {\n        return authorUsername;\n    }\n\n    public List<Comment> getComments() {\n        return comments;\n    }\n\n    //Setters\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public void setPicture(String picture) {\n        this.picture = picture;\n    }\n\n    public void setInstructions(String instructions) {\n        this.instructions = instructions;\n    }\n\n    public void setIngredients(List<String> ingredients) {\n        this.ingredients = ingredients;\n    }\n\n    public void setCategories(List<String> categories) {\n        this.categories = categories;\n    }\n\n    public void setCreationTime(Date creationTime) {\n        this.creationTime = creationTime;\n    }\n\n    public void setCalories(int calories) {\n        this.calories = calories;\n    }\n\n    public void setFat(int fat) {\n        this.fat = fat;\n    }\n\n    public void setProtein(int protein) {\n        this.protein = protein;\n    }\n\n    public void setCarbs(int carbs) {\n        this.carbs = carbs;\n    }\n\n    public void setAuthorUsername(String authorUsername) {\n        this.authorUsername = authorUsername;\n    }\n\n    public void setComments(List<Comment> comments) {\n        this.comments = comments;\n    }\n\n    @Override\n    public String toString() {\n        return \"Recipe{\" +\n                \"title='\" + title + '\\'' +\n                \", instructions='\" + instructions + '\\'' +\n                \", ingredients=\" + ingredients +\n                \", categories=\" + categories +\n                \", calories=\" + calories +\n                \", fat=\" + fat +\n                \", protein=\" + protein +\n                \", carbs=\" + carbs +\n                \", creationTime=\" + creationTime +\n                \", picture='\" + picture + '\\'' +\n                \", authorUsername='\" + authorUsername + '\\'' +\n                \", comments=\" + comments +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/model/Recipe.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/model/Recipe.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/model/Recipe.java	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/model/Recipe.java	(date 1608220732969)
@@ -152,6 +152,8 @@
         this.comments = comments;
     }
 
+    public void addComments(Comment comment) {this.comments.add(comment);}
+
     @Override
     public String toString() {
         return "Recipe{" +
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.utils;\n\nimport com.thoughtworks.xstream.XStream;\nimport it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController;\nimport it.unipi.dii.inginf.lsdb.justrecipe.controller.RecipeSnapshotController;\nimport it.unipi.dii.inginf.lsdb.justrecipe.controller.UserSnapshotController;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.User;\nimport javafx.event.Event;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Node;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Alert;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.validation.Schema;\nimport javax.xml.validation.SchemaFactory;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Class that contains some useful method\n */\npublic class Utils {\n\n    /**\n     * Snippet of code for jumping in the next scene\n     * Every scene has associated its specific controller\n     * @param fileName      The name of the file in which i can obtain the GUI (.fxml)\n     * @param event         The event that leads to change the scene\n     * @return The new controller, because I need to pass some parameters\n     */\n    public static Object changeScene (String fileName, Event event)\n    {\n        Scene scene = null;\n        FXMLLoader loader = null;\n        try {\n            loader=new FXMLLoader(Utils.class.getResource(fileName));\n            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            scene = new Scene(loader.load());\n            stage.setScene(scene);\n            stage.show();\n            return loader.getController();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * This function is used to read the config.xml file\n     * @return  ConfigurationParameters instance\n     */\n    public static ConfigurationParameters readConfigurationParameters ()\n    {\n        if (validConfigurationParameters())\n        {\n            XStream xs = new XStream();\n\n            String text = null;\n            try {\n                text = new String(Files.readAllBytes(Paths.get(\"./config.xml\")));\n            }\n            catch (Exception e) {\n                System.err.println(e.getMessage());\n            }\n\n            return (ConfigurationParameters) xs.fromXML(text);\n        }\n        else\n        {\n            System.exit(1); //If i can't read the configuration file I can't continue with the program\n        }\n        return null;\n    }\n\n    /**\n     * This function is used to validate the config.xml with the config.xsd\n     * @return  true if config.xml is well formatted, otherwise false\n     */\n    private static boolean validConfigurationParameters()\n    {\n        try\n        {\n            DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n            Document document = documentBuilder.parse(\"./config.xml\");\n            Schema schema = schemaFactory.newSchema(new StreamSource(\"./config.xsd\"));\n            schema.newValidator().validate(new DOMSource(document));\n        }\n        catch (Exception e)\n        {\n            if (e instanceof SAXException)\n                System.out.println(\"Validation Error: \" + e.getMessage());\n            else\n                System.out.println(e.getMessage());\n\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Function used to get the string representation of a List<String>, with every element separated by comma\n     * @param list  the list to transform\n     * @return      the string representation\n     */\n    public static String fromListToString (List<String> list)\n    {\n        String string = \"\";\n        if (list != null)\n        {\n            Iterator<String> iterator = list.iterator();\n            while (iterator.hasNext())\n            {\n                string = string.concat(iterator.next());\n                if (iterator.hasNext())\n                {\n                    string = string.concat(\", \");\n                }\n            }\n        }\n        return string;\n    }\n\n    /**\n     * Function that transform a Date object in the standard format chosen for the application\n     * @param date\n     * @return\n     */\n    public static String fromDateToString (Date date)\n    {\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        return dateFormat.format(date);\n    }\n\n    /**\n     * Function that shows an error alert\n     * @param text  Text to be shown\n     */\n    public static void showErrorAlert (String text)\n    {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setContentText(text);\n        alert.setHeaderText(\"Ops.. Something went wrong..\");\n        alert.setTitle(\"Error\");\n        ImageView imageView = new ImageView(new Image(\"/img/emoticon-cry.png\"));\n        alert.setGraphic(imageView);\n        alert.show();\n    }\n\n    /**\n     * This function create a pane that contains a recipe snapshot\n     * @param recipe    recipe to display in the snapshot\n     * @return\n     */\n    private static Pane createRecipeSnapshot(Recipe recipe)\n    {\n        Pane pane = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(Utils.class.getResource(\"/recipeSnap.fxml\"));\n            pane = (Pane) loader.load();\n            RecipeSnapshotController recipeSnapshotController =\n                    (RecipeSnapshotController) loader.getController();\n            recipeSnapshotController.setRecipe(recipe);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return pane;\n    }\n\n    /**\n     * Function that adds the snapshots of the recipes, 2 for each row\n     * @param vBox      VBox in which I have to show the snapshots\n     * @param recipes   Recipes to show\n     */\n    public static void addRecipesSnap(VBox vBox, List<Recipe> recipes) {\n        Iterator<Recipe> iterator = recipes.iterator();\n        while (iterator.hasNext())\n        {\n            HBox row = new HBox();\n            row.setStyle(\"-fx-padding: 10px\");\n            row.setSpacing(20);\n            Recipe recipe1 = iterator.next();\n            Pane rec1 = createRecipeSnapshot(recipe1);\n            row.getChildren().add(rec1);\n            if (iterator.hasNext())\n            {\n                Recipe recipe2 = iterator.next();\n                Pane rec2 = createRecipeSnapshot(recipe2);\n                row.getChildren().add(rec2);\n            }\n            vBox.getChildren().add(row);\n        }\n    }\n\n    /**\n     * Function used to show the comments\n     * @param vBox      VBox in which I have to show the comments\n     * @param comments  Comments to show\n     */\n    public static void showComments(VBox vBox, List<Comment> comments) {\n        Iterator<Comment> iterator = comments.iterator();\n        vBox.setSpacing(20);\n        while (iterator.hasNext())\n        {\n            Comment comment = iterator.next();\n            Pane commentPane = loadComment(comment);\n            vBox.getChildren().add(commentPane);\n        }\n    }\n\n    /**\n     * Function used to load the .fxml for the comment\n     * @param comment   Comment to show\n     * @return          The pane in which I have showed the comment\n     */\n    private static Pane loadComment (Comment comment)\n    {\n        Pane pane = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(Utils.class.getResource(\"/comment.fxml\"));\n            pane = (Pane) loader.load();\n            CommentController commentController =\n                    (CommentController) loader.getController();\n            commentController.setComment(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return pane;\n    }\n\n    /**\n     * Function used to load the .fxml for the snapshot of the user\n     * @param user      User to load\n     * @return          The pane in which the snapshot has been loaded\n     */\n    private static Pane loadUserSnapshot (User user)\n    {\n        Pane pane = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(Utils.class.getResource(\"/userSnap.fxml\"));\n            pane = (Pane) loader.load();\n            UserSnapshotController userSnapshotController =\n                    (UserSnapshotController) loader.getController();\n            userSnapshotController.setUserSnap(user);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return pane;\n    }\n\n    /**\n     * Function that load the snapshot of the users in the pane\n     * There will be four snapshot for each row (if possible)\n     * @param vBox          VBox in which the snapshot has to be inserted\n     * @param users         The users to show\n     */\n    public static void addUsersSnap(VBox vBox, List<User> users) {\n        Iterator<User> iterator = users.iterator();\n        while (iterator.hasNext())\n        {\n            HBox row = new HBox();\n            row.setStyle(\"-fx-padding: 10px\");\n            row.setSpacing(10);\n            User user1 = iterator.next();\n            Pane pane1 = loadUserSnapshot (user1);\n            row.getChildren().add(pane1);\n            if (iterator.hasNext())\n            {\n                User user2 = iterator.next();\n                Pane pane2 = loadUserSnapshot (user2);\n                row.getChildren().add(pane2);\n\n                if (iterator.hasNext())\n                {\n                    User user3 = iterator.next();\n                    Pane pane3 = loadUserSnapshot (user3);\n                    row.getChildren().add(pane3);\n\n                    if (iterator.hasNext())\n                    {\n                        User user4 = iterator.next();\n                        Pane pane4 = loadUserSnapshot (user4);\n                        row.getChildren().add(pane4);\n                    }\n                }\n            }\n            vBox.getChildren().add(row);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java	(date 1608220732986)
@@ -229,6 +229,16 @@
         }
     }
 
+    /**
+     * Function used to show one comment
+     * @param pane      Pane in which I have to show the comments
+     * @param comment  Comments to show
+     */
+    public static void showComment(Pane pane, Comment comment){
+        Pane commentPane = loadComment(comment);
+        pane.getChildren().add(commentPane);
+    }
+
     /**
      * Function used to load the .fxml for the comment
      * @param comment   Comment to show
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.persistence;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport com.mongodb.ConnectionString;\nimport com.mongodb.client.*;\nimport com.mongodb.client.model.Accumulators;\nimport com.mongodb.client.model.Aggregates;\nimport com.mongodb.client.model.Filters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.User;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport org.bson.Document;\nimport org.bson.conversions.Bson;\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\n\nimport static com.mongodb.client.model.Aggregates.*;\nimport static com.mongodb.client.model.Filters.eq;\nimport static com.mongodb.client.model.Projections.*;\nimport static com.mongodb.client.model.Projections.include;\nimport static com.mongodb.client.model.Sorts.descending;\n\n/**\n * This class is used to communicate with MongoDB\n */\npublic class MongoDBDriver implements DatabaseDriver{\n    private static MongoDBDriver instance;\n\n    private MongoClient mongoClient;\n    private MongoDatabase database;\n    private MongoCollection collection;\n    private String ip;\n    private int port;\n    private String username;\n    private String password;\n    private String dbName;\n\n    public static MongoDBDriver getInstance() {\n        if (instance == null)\n        {\n            instance = new MongoDBDriver(Utils.readConfigurationParameters());\n        }\n        return instance;\n    }\n\n    /**\n     * Consumer function that prints the document in json format\n     */\n    private Consumer<Document> printDocuments = doc -> {\n        System.out.println(doc.toJson());\n    };\n\n    private MongoDBDriver (ConfigurationParameters configurationParameters)\n    {\n        this.ip = configurationParameters.getMongoIp();\n        this.port = configurationParameters.getMongoPort();\n        this.username = configurationParameters.getMongoUsername();\n        this.password = configurationParameters.getMongoPassword();\n        this.dbName = configurationParameters.getMongoDbName();\n        initConnection();\n        chooseCollection(\"recipe\");\n    }\n\n    /**\n     * Method that inits the MongoClient and choose the correct database\n     */\n    @Override\n    public void initConnection() {\n        ConnectionString connectionString;\n        if (!username.equals(\"\")) // if there are access rules\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + username + \":\" + password\n                    + \"@\" + ip + \":\" + port);\n        }\n        else // standard access\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + ip + \":\" + port);\n        }\n        mongoClient = MongoClients.create(connectionString);\n        database = mongoClient.getDatabase(dbName);\n    }\n\n    /**\n     * Method used to close the connection\n     */\n    @Override\n    public void closeConnection() {\n        if (mongoClient != null)\n            mongoClient.close();\n    }\n\n    /**\n     * Method used to change the collection\n     * @param name  name of the new collection\n     */\n    public void chooseCollection(String name)\n    {\n        collection = database.getCollection(name);\n    }\n\n    /**\n     * Function used to get the list of Recipe to show in the homepage\n     * @param from      first extreme of the interval\n     * @param to        second extreme of the interval\n     * @param follower  list of follower of the user, used to choose the interest recipes\n     * @return          The list of (to-from) element to show, in descendent order from creationTime\n     */\n    public List<Recipe> getHomepageRecipe (int from, int to, List<User> follower)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        List<Document> results = new ArrayList<>();\n        if (follower.size() != 0)\n        {\n            // TO DO\n            // Check for the recipe done by the following of the user\n        }\n        else\n        {\n            Bson sort = sort(descending(\"creationTime\"));\n            Bson skip = skip(from);\n            Bson limit = limit(to);\n            results = (List<Document>) collection.aggregate(Arrays.asList(sort, skip, limit))\n                    .into(new ArrayList<>());\n        }\n\n        // This is important for deserialize the results in a list of recipe\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes that contains in their title the title inserted by the user\n     * @param title     Title to check\n     * @param from      First extreme of the interval\n     * @param to        Second extreme of the interval\n     * @return          The list of the recipes that match the condition\n     */\n    public List<Recipe> searchRecipesFromTitle (String title, int from, int to)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Pattern pattern = Pattern.compile(\"^.*\" + title + \".*$\", Pattern.CASE_INSENSITIVE);\n        Bson match = Aggregates.match(Filters.regex(\"title\", pattern));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(from);\n        Bson limit = limit(to);\n        List<Document> results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the most common categories (the top one used)\n     * @param howManyCategories     How many category to consider in the rank\n     * @return                      The category ordered by the number of recipes in which it is used\n     */\n    public List<String> searchMostCommonRecipeCategories (int howManyCategories)\n    {\n        List<String> mostCommonCategories = new ArrayList<>();\n        Bson unwind = unwind(\"$categories\");\n        Bson group = group(\"$categories\", Accumulators.sum(\"numberOfRecipes\", 1));\n        Bson project = project(fields(computed(\"categories\", \"$_id\"), excludeId(), include(\"numberOfRecipes\")));\n        Bson sort = sort(descending(\"numberOfRecipes\"));\n        Bson limit = limit(howManyCategories);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(unwind, group, project, sort, limit)).into(new ArrayList());\n\n        for (Document document: results)\n        {\n            mostCommonCategories.add(document.getString(\"categories\"));\n        }\n        return mostCommonCategories;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes of one category\n     * @param category      The category to consider\n     * @param howMany       How many recipes to return\n     * @return              List of the recipes\n     */\n    public List<Recipe> getRecipesOfCategory (String category, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson match = match(Filters.in(\"categories\", category));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(match, sort, limit)).into(new ArrayList());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function for searching all the comments, ordered by the creationTime (first the last)\n     * The list will be useful for the moderators\n     * @param from      first extreme of the interval\n     * @param to        second extreme of the interval\n     * @return          The list of the comments\n     */\n    public List<Comment> searchAllComments (int from, int to)\n    {\n        List<Comment> comments = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson unwind = unwind(\"$comments\");\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(from);\n        Bson limit = limit(to);\n        MongoCursor<Document> iterator = (MongoCursor<Document>)\n                collection.aggregate(Arrays.asList(unwind, sort, skip, limit)).iterator();\n        while (iterator.hasNext())\n        {\n            Document document = (Document) iterator.next().get(\"comments\");\n            Comment comment = gson.fromJson(gson.toJson(document), Comment.class);\n            comments.add(comment);\n        }\n        return comments;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(date 1608232614133)
@@ -3,6 +3,7 @@
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import com.mongodb.ConnectionString;
+import com.mongodb.MongoClientSettings;
 import com.mongodb.client.*;
 import com.mongodb.client.model.Accumulators;
 import com.mongodb.client.model.Aggregates;
@@ -13,6 +14,8 @@
 import it.unipi.dii.inginf.lsdb.justrecipe.model.User;
 import it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;
 import org.bson.Document;
+import org.bson.codecs.configuration.CodecRegistry;
+import org.bson.codecs.pojo.PojoCodecProvider;
 import org.bson.conversions.Bson;
 import java.lang.reflect.Type;
 import java.util.*;
@@ -24,6 +27,8 @@
 import static com.mongodb.client.model.Projections.*;
 import static com.mongodb.client.model.Projections.include;
 import static com.mongodb.client.model.Sorts.descending;
+import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
+import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;
 
 /**
  * This class is used to communicate with MongoDB
@@ -34,6 +39,7 @@
     private MongoClient mongoClient;
     private MongoDatabase database;
     private MongoCollection collection;
+    private CodecRegistry pojoCodecRegistry;
     private String ip;
     private int port;
     private String username;
@@ -83,6 +89,8 @@
         }
         mongoClient = MongoClients.create(connectionString);
         database = mongoClient.getDatabase(dbName);
+        pojoCodecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(),
+                fromProviders(PojoCodecProvider.builder().automatic(true).build()));
     }
 
     /**
@@ -226,4 +234,11 @@
         }
         return comments;
     }
+    public void updateComments(String title, List<Comment> comments){
+//        chooseCollection("recipe");
+        collection = collection.withCodecRegistry(pojoCodecRegistry);
+        Bson update = new Document("comments", comments);
+        Bson updateOperation = new Document("$set", update);
+        collection.updateOne(new Document("title", title), updateOperation);
+    }
 }
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.controller;\n\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Session;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.Label;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Font;\nimport javafx.scene.text.Text;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Controller for the page of the recipe\n */\npublic class RecipePageController {\n\n    @FXML private ImageView homeImg;\n    @FXML private ImageView discoveryImg;\n    @FXML private ImageView profileImg;\n    @FXML private Text recipeInstructions;\n    @FXML private ImageView recipeLikeImg;\n    @FXML private ImageView recipePicture;\n    @FXML private ImageView logoutPic;\n    @FXML private Text recipeTitle;\n    @FXML private Text recipeUsername;\n    @FXML private Text recipeCarbs;\n    @FXML private Text recipeCalories;\n    @FXML private Text recipeFat;\n    @FXML private ImageView recipeEditImg;\n    @FXML private Text recipeCategories;\n    @FXML private Text recipeIngredients;\n    @FXML private Text recipeProtein;\n    @FXML private Label recipeLikes;\n    @FXML private Label recipeDate;\n    @FXML private VBox recipeVBox;\n    @FXML private ImageView recipeDelete;\n\n    private Recipe recipe;\n   // private String username;\n    private Session appSession;\n    private Neo4jDriver neo4jDriver;\n\n    public void initialize ()\n    {\n        homeImg.setOnMouseClicked(mouseEvent -> clickOnHomepageToChangePage(mouseEvent));\n        profileImg.setOnMouseClicked(mouseEvent -> clickOnProfileToChangePage(mouseEvent));\n        discoveryImg.setOnMouseClicked(mouseEvent -> clickOnDiscoveryToChangePage(mouseEvent));\n        logoutPic.setOnMouseClicked(mouseEvent -> clickOnLogoutImg(mouseEvent));\n        recipeVBox.setAlignment(Pos.CENTER);\n        appSession = Session.getInstance();\n        neo4jDriver = Neo4jDriver.getInstance();\n    }\n\n    /**\n     * Setters for the recipe, in which we also set the correct value to show\n     * @param recipe    Recipe to show\n     */\n    public void setRecipe(Recipe recipe) {\n        this.recipe = recipe;\n        recipeTitle.setText(recipe.getTitle());\n        recipeInstructions.setText(recipe.getInstructions());\n        if (recipe.getPicture() != null)\n        {\n            recipePicture.setImage(new Image(recipe.getPicture()));\n        }\n        else\n        {\n            recipePicture.setImage(new Image(\"img/genericRecipe.png\"));\n        }\n        recipeUsername.setText(recipe.getAuthorUsername());\n        recipeCarbs.setText(String.valueOf(recipe.getCarbs()));\n        recipeCalories.setText(String.valueOf(recipe.getCalories()));\n        recipeFat.setText(String.valueOf(recipe.getFat()));\n        recipeProtein.setText(String.valueOf(recipe.getProtein()));\n        recipeCategories.setText(Utils.fromListToString(recipe.getCategories()));\n        recipeIngredients.setText(Utils.fromListToString(recipe.getIngredients()));\n        recipeDate.setText(\"Published on: \" + Utils.fromDateToString(recipe.getCreationTime()));\n        //TO DO\n        recipeLikes.setText(\"Likes: 0\");\n\n        List<Comment> comments = new ArrayList<>();\n        comments.add(new Comment(\"Pippo\", \"Hello World!\", new Date()));\n        comments.add(new Comment(\"Pluto\", \"Fantastic recipe!\", new Date()));\n        recipe.setComments(comments);\n        if (comments != null)\n        {\n            Label commentsTitle = new Label(\"Comments:\");\n            commentsTitle.setFont(Font.font(24));\n            recipeVBox.getChildren().add(commentsTitle);\n            Utils.showComments(recipeVBox, recipe.getComments());\n        }\n\n        if(appSession.getLoggedUser().getRole()!=2 && !appSession.getLoggedUser().getUsername().equals(recipe.getAuthorUsername()))\n            recipeDelete.setVisible(false);\n        else\n            recipeDelete.setOnMouseClicked(mouseEvent -> neo4jDriver.deleteRecipe(recipe.getTitle(),recipe.getCreationTime()));\n    }\n\n    /**\n     * Function used to handle the click on the homepage icon\n     * @param mouseEvent    event that represents the click on the icon\n     */\n    private void clickOnHomepageToChangePage(MouseEvent mouseEvent){\n        HomePageController homePageController = (HomePageController)\n                Utils.changeScene(\"/homepage.fxml\", mouseEvent);\n    }\n\n    /**\n     * Function used to handle the click on the profile icon\n     * @param mouseEvent    event that represents the click on the icon\n     */\n    private void clickOnProfileToChangePage(MouseEvent mouseEvent){\n        ProfilePageController profilePageController = (ProfilePageController)\n                Utils.changeScene(\"/profilePage.fxml\", mouseEvent);\n        profilePageController.setProfile(Session.getInstance().getLoggedUser());\n    }\n\n    /**\n     * Function used to handle the click on the discovery icon\n     * @param mouseEvent    event that represents the click on the icon\n     */\n    private void clickOnDiscoveryToChangePage(MouseEvent mouseEvent){\n        DiscoveryPageController discoveryPageController = (DiscoveryPageController)\n                Utils.changeScene(\"/discoveryPage.fxml\", mouseEvent);\n    }\n\n    /**\n     * Function that let the logout action, by going into the welcome page\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnLogoutImg(MouseEvent mouseEvent){\n        try {\n            WelcomePageController welcomePageController = (WelcomePageController)\n                    Utils.changeScene(\"/welcome.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"profilePageController is null!!!!\");}\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java	(date 1608233265323)
@@ -3,12 +3,17 @@
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Session;
+import it.unipi.dii.inginf.lsdb.justrecipe.persistence.MongoDBDriver;
 import it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;
 import it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;
+import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.fxml.FXMLLoader;
 import javafx.geometry.Pos;
+import javafx.scene.AccessibleAction;
+import javafx.scene.control.Button;
 import javafx.scene.control.Label;
+import javafx.scene.control.TextArea;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
 import javafx.scene.input.MouseEvent;
@@ -48,11 +53,15 @@
     @FXML private Label recipeDate;
     @FXML private VBox recipeVBox;
     @FXML private ImageView recipeDelete;
+    @FXML private TextArea commentsArea;
+    @FXML private Button sendButton;
+    @FXML private Button cancelButton;
 
     private Recipe recipe;
    // private String username;
     private Session appSession;
     private Neo4jDriver neo4jDriver;
+    private MongoDBDriver mongoDBDriver;
 
     public void initialize ()
     {
@@ -63,6 +72,33 @@
         recipeVBox.setAlignment(Pos.CENTER);
         appSession = Session.getInstance();
         neo4jDriver = Neo4jDriver.getInstance();
+        mongoDBDriver = MongoDBDriver.getInstance();
+        sendButton.setOnAction(actionEvent -> handleSendButtonAction(actionEvent));
+        cancelButton.setOnAction(actionEvent -> handleCancelButtonAction(actionEvent));
+    }
+
+    private void handleSendButtonAction(ActionEvent actionEvent){
+        if(commentsArea.getText().equals("")) {
+            Utils.showErrorAlert("No Comments in the CommentsArea");
+            return;
+        }
+//        System.out.println(recipe.getComments());
+//        System.out.println(recipe.getTitle());
+        Comment comment = new Comment(appSession.getLoggedUser().getUsername(), commentsArea.getText(), new Date());
+        if(recipe.getComments() != null)
+            recipe.addComments(comment);
+        else{
+            List<Comment> comments= new ArrayList<>();
+            comments.add(comment);
+            recipe.setComments(comments);
+        }
+        Utils.showComment(recipeVBox, comment);
+//        System.out.println(recipe.getComments());
+        mongoDBDriver.updateComments(recipe.getTitle(), recipe.getComments());
+    }
+
+    private void handleCancelButtonAction(ActionEvent actionEvent){
+        if(!commentsArea.getText().equals("")) commentsArea.setText("");
     }
 
     /**
@@ -91,18 +127,23 @@
         recipeDate.setText("Published on: " + Utils.fromDateToString(recipe.getCreationTime()));
         //TO DO
         recipeLikes.setText("Likes: 0");
-
-        List<Comment> comments = new ArrayList<>();
-        comments.add(new Comment("Pippo", "Hello World!", new Date()));
-        comments.add(new Comment("Pluto", "Fantastic recipe!", new Date()));
-        recipe.setComments(comments);
-        if (comments != null)
-        {
+        if(recipe.getComments() != null) {
             Label commentsTitle = new Label("Comments:");
             commentsTitle.setFont(Font.font(24));
             recipeVBox.getChildren().add(commentsTitle);
             Utils.showComments(recipeVBox, recipe.getComments());
         }
+//        List<Comment> comments = new ArrayList<>();
+//        comments.add(new Comment("Pippo", "Hello World!", new Date()));
+//        comments.add(new Comment("Pluto", "Fantastic recipe!", new Date()));
+//        recipe.setComments(comments);
+//        if (comments != null)
+//        {
+//            Label commentsTitle = new Label("Comments:");
+//            commentsTitle.setFont(Font.font(24));
+//            recipeVBox.getChildren().add(commentsTitle);
+//            Utils.showComments(recipeVBox, recipe.getComments());
+//        }
 
         if(appSession.getLoggedUser().getRole()!=2 && !appSession.getLoggedUser().getUsername().equals(recipe.getAuthorUsername()))
             recipeDelete.setVisible(false);
Index: src/main/resources/recipePage.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.ScrollPane?>\n<?import javafx.scene.effect.Blend?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.BorderPane?>\n<?import javafx.scene.layout.HBox?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.VBox?>\n<?import javafx.scene.shape.Line?>\n<?import javafx.scene.text.Font?>\n<?import javafx.scene.text.Text?>\n\n<VBox xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.RecipePageController\">\n   <children>\n      <BorderPane prefHeight=\"84.0\" style=\"-fx-background-color: rgb(237, 160, 66);\">\n         <effect>\n            <Blend />\n         </effect>\n         <left>\n            <ImageView fitHeight=\"81.0\" fitWidth=\"95.0\" pickOnBounds=\"true\" preserveRatio=\"true\" BorderPane.alignment=\"CENTER\">\n               <image>\n                  <Image url=\"@img/icon.png\" />\n               </image>\n               <BorderPane.margin>\n                  <Insets left=\"20.0\" />\n               </BorderPane.margin>\n            </ImageView>\n         </left>\n         <right>\n            <HBox alignment=\"CENTER\" prefHeight=\"84.0\" prefWidth=\"240.0\" BorderPane.alignment=\"CENTER\">\n               <children>\n                  <ImageView fx:id=\"logoutPic\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/exit.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n                  <ImageView fx:id=\"homeImg\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/home.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n                  <ImageView fx:id=\"discoveryImg\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/discovery.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n                  <ImageView fx:id=\"profileImg\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/user.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n               </children>\n            </HBox>\n         </right>\n         <center>\n            <HBox alignment=\"CENTER_LEFT\" BorderPane.alignment=\"CENTER\" />\n         </center>\n      </BorderPane>\n      <ScrollPane hbarPolicy=\"NEVER\" vbarPolicy=\"ALWAYS\">\n         <content>\n            <HBox alignment=\"CENTER\" prefHeight=\"693.0\" prefWidth=\"1197.0\" style=\"-fx-background-color: RGB(204, 199, 194);\">\n               <opaqueInsets>\n                  <Insets />\n               </opaqueInsets>\n               <children>\n                  <ScrollPane hbarPolicy=\"NEVER\" prefWidth=\"772.0\" style=\"-fx-background-color: white;\" vbarPolicy=\"NEVER\">\n                     <content>\n                        <VBox fx:id=\"recipeVBox\" maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefWidth=\"770.0\" spacing=\"20.0\" style=\"-fx-background-color: white;\">\n                           <children>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <Text fx:id=\"recipeTitle\" layoutX=\"20.0\" layoutY=\"66.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Tiramisu\" wrappingWidth=\"725.0\">\n                                       <font>\n                                          <Font size=\"48.0\" />\n                                       </font>\n                                    </Text>\n                                 </children>\n                              </Pane>\n                              <HBox prefHeight=\"247.0\" prefWidth=\"770.0\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefHeight=\"250.0\" prefWidth=\"260.0\">\n                                       <children>\n                                          <ImageView fx:id=\"recipePicture\" fitHeight=\"208.0\" fitWidth=\"232.0\" layoutX=\"35.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/genericRecipe.png\" />\n                                             </image>\n                                          </ImageView>\n                                       </children>\n                                    </Pane>\n                                    <Pane prefHeight=\"250.0\" prefWidth=\"199.0\">\n                                       <children>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/user.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Text fx:id=\"recipeUsername\" layoutX=\"48.0\" layoutY=\"29.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Username\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"46.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/carbs.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"88.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/calories.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"136.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/fat.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Text fx:id=\"recipeCarbs\" layoutX=\"55.0\" layoutY=\"75.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"30\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <Text fx:id=\"recipeCalories\" layoutX=\"55.0\" layoutY=\"124.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"20\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <Text fx:id=\"recipeFat\" layoutX=\"55.0\" layoutY=\"165.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"40\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"179.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/protein1.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Text fx:id=\"recipeProtein\" layoutX=\"55.0\" layoutY=\"208.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"50\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <Line endY=\"-38.0\" layoutX=\"178.0\" layoutY=\"51.0\" startY=\"167.0\" />\n                                       </children>\n                                    </Pane>\n                                    <Pane prefHeight=\"240.0\" prefWidth=\"318.0\">\n                                       <children>\n                                          <ImageView fx:id=\"recipeLikeImg\" fitHeight=\"40.0\" fitWidth=\"54.0\" layoutX=\"14.0\" layoutY=\"60.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/like.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <ImageView fx:id=\"recipeEditImg\" fitHeight=\"40.0\" fitWidth=\"70.0\" layoutX=\"17.0\" layoutY=\"114.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/edit.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Label fx:id=\"recipeLikes\" layoutX=\"14.0\" layoutY=\"23.0\" text=\"Like:\">\n                                             <font>\n                                                <Font size=\"15.0\" />\n                                             </font>\n                                          </Label>\n                                          <Label fx:id=\"recipeDate\" layoutX=\"108.0\" layoutY=\"23.0\" text=\"Published on:\">\n                                             <font>\n                                                <Font size=\"15.0\" />\n                                             </font>\n                                          </Label>\n                                          <ImageView fx:id=\"recipeDelete\" fitHeight=\"40.0\" fitWidth=\"200.0\" layoutX=\"14.0\" layoutY=\"173.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/delete.png\" />\n                                             </image>\n                                          </ImageView>\n                                       </children>\n                                    </Pane>\n                                 </children>\n                                 <padding>\n                                    <Insets top=\"20.0\" />\n                                 </padding>\n                              </HBox>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefWidth=\"770.0\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <Text fx:id=\"recipeInstructions\" layoutX=\"23.0\" layoutY=\"20.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Anticamente le nonne usavano preparare una colazione che oggi potremmo definirepovera, ma che all’epoca era davvero ricchissima! Ancora oggi la ricetta è immutata,basta rompere in un bicchiere un uovo freschissimo e sbatterlo con dello zucchero ea piacere aggiungere caffè o latte caldo, per i più piccoli, e marsala o anice per i piùgrandicelli. Ed è proprio da questa portentosa crema che nasce la crema al mascarponebase del tiramisù. Il dolce italiano per eccellenza, quello più famoso e amato,ma soprattutto che ha dato vita a tantissime altre versioni, anche tiramisù senza uova!Poi il tiramisù alle fragole o quello alla Nutella, giusto per citarne un paio!Senza contare le rivisitazioni più raffinate come la crostata morbida o la torta al tiramisù.\" wrappingWidth=\"725.0\" />\n                                 </children>\n                                 <VBox.margin>\n                                    <Insets />\n                                 </VBox.margin>\n                              </Pane>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <ImageView fitHeight=\"71.0\" fitWidth=\"63.0\" layoutX=\"35.0\" layoutY=\"9.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                       <image>\n                                          <Image url=\"@img/tag.png\" />\n                                       </image>\n                                    </ImageView>\n                                    <Text fx:id=\"recipeCategories\" layoutX=\"117.0\" layoutY=\"37.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"italian, dolce, prova, ciao, mascarpone\" wrappingWidth=\"600.0\">\n                                       <font>\n                                          <Font size=\"15.0\" />\n                                       </font>\n                                    </Text>\n                                 </children>\n                                 <opaqueInsets>\n                                    <Insets />\n                                 </opaqueInsets>\n                                 <VBox.margin>\n                                    <Insets />\n                                 </VBox.margin>\n                              </Pane>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefWidth=\"770.0\" style=\"-fx-background-color: white;\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <ImageView fitHeight=\"84.0\" fitWidth=\"78.0\" layoutX=\"20.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                       <image>\n                                          <Image url=\"@img/ingredients1.png\" />\n                                       </image>\n                                    </ImageView>\n                                    <Text fx:id=\"recipeIngredients\" layoutX=\"114.0\" layoutY=\"45.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"uova, mascarpone, ingr1, ingr2, ingr3, ingr4, ingr5\" wrappingWidth=\"600.0\">\n                                       <font>\n                                          <Font size=\"15.0\" />\n                                       </font>\n                                    </Text>\n                                 </children>\n                                 <VBox.margin>\n                                    <Insets bottom=\"35.0\" />\n                                 </VBox.margin>\n                              </Pane>\n                           </children>\n                        </VBox>\n                     </content>\n                  </ScrollPane>\n               </children>\n            </HBox>\n         </content>\n      </ScrollPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/recipePage.fxml b/src/main/resources/recipePage.fxml
--- a/src/main/resources/recipePage.fxml	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/src/main/resources/recipePage.fxml	(date 1608220733012)
@@ -1,8 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 <?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
 <?import javafx.scene.control.Label?>
 <?import javafx.scene.control.ScrollPane?>
+<?import javafx.scene.control.TextArea?>
 <?import javafx.scene.effect.Blend?>
 <?import javafx.scene.image.Image?>
 <?import javafx.scene.image.ImageView?>
@@ -74,7 +76,7 @@
       </BorderPane>
       <ScrollPane hbarPolicy="NEVER" vbarPolicy="ALWAYS">
          <content>
-            <HBox alignment="CENTER" prefHeight="693.0" prefWidth="1197.0" style="-fx-background-color: RGB(204, 199, 194);">
+            <HBox alignment="CENTER" prefHeight="700.0" prefWidth="1197.0" style="-fx-background-color: RGB(204, 199, 194);">
                <opaqueInsets>
                   <Insets />
                </opaqueInsets>
@@ -85,7 +87,7 @@
                            <children>
                               <Pane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" VBox.vgrow="ALWAYS">
                                  <children>
-                                    <Text fx:id="recipeTitle" layoutX="20.0" layoutY="66.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Tiramisu" wrappingWidth="725.0">
+                                    <Text fx:id="recipeTitle" focusTraversable="true" layoutX="20.0" layoutY="66.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Tiramisu" wrappingWidth="725.0">
                                        <font>
                                           <Font size="48.0" />
                                        </font>
@@ -192,6 +194,23 @@
                                     <Insets top="20.0" />
                                  </padding>
                               </HBox>
+                              <Pane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefWidth="770.0" style="-fx-background-color: white;" VBox.vgrow="ALWAYS">
+                                 <children>
+                                    <ImageView fitHeight="84.0" fitWidth="78.0" layoutX="20.0" pickOnBounds="true" preserveRatio="true">
+                                       <image>
+                                          <Image url="@img/ingredients1.png" />
+                                       </image>
+                                    </ImageView>
+                                    <Text fx:id="recipeIngredients" layoutX="114.0" layoutY="45.0" strokeType="OUTSIDE" strokeWidth="0.0" text="uova, mascarpone, ingr1, ingr2, ingr3, ingr4, ingr5" wrappingWidth="600.0">
+                                       <font>
+                                          <Font size="15.0" />
+                                       </font>
+                                    </Text>
+                                 </children>
+                                 <VBox.margin>
+                                    <Insets bottom="5.0" />
+                                 </VBox.margin>
+                              </Pane>
                               <Pane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefWidth="770.0" VBox.vgrow="ALWAYS">
                                  <children>
                                     <Text fx:id="recipeInstructions" layoutX="23.0" layoutY="20.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Anticamente le nonne usavano preparare una colazione che oggi potremmo definirepovera, ma che all’epoca era davvero ricchissima! Ancora oggi la ricetta è immutata,basta rompere in un bicchiere un uovo freschissimo e sbatterlo con dello zucchero ea piacere aggiungere caffè o latte caldo, per i più piccoli, e marsala o anice per i piùgrandicelli. Ed è proprio da questa portentosa crema che nasce la crema al mascarponebase del tiramisù. Il dolce italiano per eccellenza, quello più famoso e amato,ma soprattutto che ha dato vita a tantissime altre versioni, anche tiramisù senza uova!Poi il tiramisù alle fragole o quello alla Nutella, giusto per citarne un paio!Senza contare le rivisitazioni più raffinate come la crostata morbida o la torta al tiramisù." wrappingWidth="725.0" />
@@ -217,25 +236,20 @@
                                     <Insets />
                                  </opaqueInsets>
                                  <VBox.margin>
-                                    <Insets />
+                                    <Insets bottom="20.0" />
                                  </VBox.margin>
                               </Pane>
-                              <Pane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" prefWidth="770.0" style="-fx-background-color: white;" VBox.vgrow="ALWAYS">
+                              <Pane prefHeight="200.0" prefWidth="200.0">
                                  <children>
-                                    <ImageView fitHeight="84.0" fitWidth="78.0" layoutX="20.0" pickOnBounds="true" preserveRatio="true">
-                                       <image>
-                                          <Image url="@img/ingredients1.png" />
-                                       </image>
-                                    </ImageView>
-                                    <Text fx:id="recipeIngredients" layoutX="114.0" layoutY="45.0" strokeType="OUTSIDE" strokeWidth="0.0" text="uova, mascarpone, ingr1, ingr2, ingr3, ingr4, ingr5" wrappingWidth="600.0">
+                                    <TextArea fx:id="commentsArea" focusTraversable="false" layoutX="29.0" layoutY="39.0" prefHeight="106.0" prefWidth="723.0" />
+                                    <Label layoutX="282.0" layoutY="9.0" text="Write a comment:">
                                        <font>
-                                          <Font size="15.0" />
+                                          <Font size="24.0" />
                                        </font>
-                                    </Text>
+                                    </Label>
+                                    <Button fx:id="sendButton" layoutX="701.0" layoutY="160.0" mnemonicParsing="false" text="Send" />
+                                    <Button fx:id="cancelButton" layoutX="624.0" layoutY="160.0" mnemonicParsing="false" text="Cancel" />
                                  </children>
-                                 <VBox.margin>
-                                    <Insets bottom="35.0" />
-                                 </VBox.margin>
                               </Pane>
                            </children>
                         </VBox>
Index: src/main/resources/comment.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.TextArea?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.VBox?>\n\n<VBox maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefWidth=\"600.0\" style=\"-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;\" xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController\">\n   <children>\n      <AnchorPane prefHeight=\"41.0\" prefWidth=\"600.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <Label fx:id=\"commentDate\" layoutX=\"26.0\" layoutY=\"12.0\" text=\"Written at: Tue Feb 25 17:11:26 \" />\n            <Label fx:id=\"commentUsername\" alignment=\"CENTER_RIGHT\" layoutX=\"500.0\" layoutY=\"12.0\" text=\"By: Username\" textAlignment=\"RIGHT\" />\n         </children>\n         <VBox.margin>\n            <Insets />\n         </VBox.margin>\n      </AnchorPane>\n      <Pane prefWidth=\"200.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <TextArea fx:id=\"commentTextArea\" layoutX=\"26.0\" layoutY=\"7.0\" prefHeight=\"89.0\" prefWidth=\"547.0\" style=\"-fx-focus-color: orange;\" text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.&#10; \" wrapText=\"true\" />\n         </children>\n      </Pane>\n      <AnchorPane prefHeight=\"69.0\" prefWidth=\"600.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <Button fx:id=\"commentModifyButton\" layoutX=\"27.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" text=\"Modify\" />\n            <Button fx:id=\"commentDeleteButton\" layoutX=\"522.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" text=\"Delete\" />\n            <Button fx:id=\"commentSaveButton\" layoutX=\"90.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"54.0\" text=\"Save\" />\n         </children>\n      </AnchorPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/comment.fxml b/src/main/resources/comment.fxml
--- a/src/main/resources/comment.fxml	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/src/main/resources/comment.fxml	(date 1608222308246)
@@ -13,7 +13,7 @@
       <AnchorPane prefHeight="41.0" prefWidth="600.0" VBox.vgrow="ALWAYS">
          <children>
             <Label fx:id="commentDate" layoutX="26.0" layoutY="12.0" text="Written at: Tue Feb 25 17:11:26 " />
-            <Label fx:id="commentUsername" alignment="CENTER_RIGHT" layoutX="500.0" layoutY="12.0" text="By: Username" textAlignment="RIGHT" />
+            <Label fx:id="commentUsername" alignment="CENTER_RIGHT" layoutX="456.0" layoutY="12.0" text="By: Username" textAlignment="RIGHT" />
          </children>
          <VBox.margin>
             <Insets />
Index: ../RecipeReader/src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.google.gson.Gson;\nimport com.mongodb.client.*;\nimport org.bson.Document;\nimport org.neo4j.driver.*;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static int HOW_MANY_RECIPES_TO_REMOVE = 30000;\n    public static String PATH_FULL_FORMAT_RECIPES = \"C:/Users/danyc/Downloads/full_format_recipes/full_format_recipes.json\";\n    public static String PATH_RECIPES_RAW_NOSOURCE_FN = \"C:/Users/danyc/Downloads/recipes_raw/recipes_raw_nosource_fn.json\";\n\n    private static MongoClient mongoClient;\n    private static MongoDatabase database;\n    private static MongoCollection collection;\n    private static Driver driver;\n\n    public static void main (String[] arg)\n    {\n        mongoClient = MongoClients.create();\n        database = mongoClient.getDatabase(\"justrecipe\");\n        collection = database.getCollection(\"recipe\");\n\n        driver = GraphDatabase.driver( \"neo4j://localhost:7687\", AuthTokens.basic( \"neo4j\", \"justrecipe\" ) );\n\n        // First of all It is useful to remove the old values (if they exists)\n        // Just for re-execute the algorithm without problem\n        collection.drop();\n        deleteAllGraph();\n\n        List<RecipeRaw> rawRecipes = new ArrayList<>();\n        addRecipes_full_format(rawRecipes, PATH_FULL_FORMAT_RECIPES);\n        addRecipes_raw(rawRecipes, PATH_RECIPES_RAW_NOSOURCE_FN);\n\n        //I have removed the last HOW_MANY_RECIPES_TO_REMOVE recipes, that are the ones that have not so much information\n        rawRecipes.subList(rawRecipes.size() - HOW_MANY_RECIPES_TO_REMOVE, rawRecipes.size()).clear();\n\n        // Remove the recipe with title == null (filter (...)) and remove the duplicates (distinct())\n        List<RecipeRaw> recipesWithoutDuplicates = rawRecipes.stream().filter(new Predicate<RecipeRaw>() {\n            @Override\n            public boolean test(RecipeRaw recipeRaw) {\n                if (recipeRaw.getTitle() != null)\n                    return true;\n                return false;\n            }\n        }).distinct().collect(Collectors.toList());\n\n        // List of users present at the initial time of the application\n        List<User> users = new ArrayList<>();\n        users.add(new User(\"Oliver\", \"Smith\", \"oliver.smith\", \"oliver.smith\"));\n        users.add(new User(\"Jack\", \"Jones\", \"jack.jones\", \"jack.jones\"));\n        users.add(new User(\"Harry\", \"Williams\", \"harry.williams\", \"harry.williams\"));\n        users.add(new User(\"Jacob\", \"Brown\", \"jacob.brown\", \"jacob.brown\"));\n        users.add(new User(\"Charlie\", \"Taylor\", \"charlie.taylor\", \"charlie.taylor\"));\n        users.add(new User(\"Thomas\", \"Davies\", \"thomas.davies\", \"thomas.davies\"));\n        users.add(new User(\"George\", \"Wilson\", \"george.wilson\", \"george.wilson\"));\n        users.add(new User(\"Oscar\", \"Evans\", \"oscar.evans\", \"oscar.evans\"));\n        users.add(new User(\"James\", \"Thomas\", \"james.thomas\", \"james.thomas\"));\n        users.add(new User(\"William\", \"Roberts\", \"william.roberts\", \"william.roberts\"));\n        users.add(new User(\"Amelia\", \"Murphy\", \"amelia.murphy\", \"amelia.murphy\"));\n        users.add(new User(\"Olivia\", \"Johnson\", \"olivia.johnson\", \"olivia.johnson\"));\n        users.add(new User(\"Isla\", \"Williams\", \"isla.williams\", \"isla.williams\"));\n        users.add(new User(\"Emily\", \"Walsh\", \"emily.walsh\", \"emily.walsh\"));\n        users.add(new User(\"Poppy\", \"Taylor\", \"poppy.taylor\", \"poppy.taylor\"));\n        users.add(new User(\"Ava\", \"Miller\", \"ava.miller\", \"ava.miller\"));\n        users.add(new User(\"Isabella\", \"Byrne\", \"isabella.byrne\", \"isabella.byrne\"));\n        users.add(new User(\"Jessica\", \"Evans\", \"jessica.evans\", \"jessica.evans\"));\n        users.add(new User(\"Lily\", \"Rodriguez\", \"lily.rodriguez\", \"lily.rodriguez\"));\n        users.add(new User(\"Sophie\", \"Roberts\", \"sophie.roberts\", \"sophie.roberts\"));\n\n        // First I insert the user, because when i choose randomly i can't be sure\n        // that they will be all pick-up, so i need to be sure that they are all present\n        // So, instead of adding the users in the insertRecipesAndUsers function, i have created another one function\n        addUsers(users);\n        insertRecipesOfUsers(recipesWithoutDuplicates, users);\n        \n        System.out.println(collection.countDocuments()); //How many documents loaded\n        mongoClient.close();\n        driver.close();\n    }\n\n    /**\n     * Add recipes from raw dataset\n     * @param recipes\n     * @param path\n     */\n    public static void addRecipes_raw (List<RecipeRaw> recipes, String path)\n    {\n        Gson gson = new Gson();\n        JsonFactory factory = new JsonFactory();\n        ObjectMapper mapper = new ObjectMapper(factory);\n        JsonNode rootNode = null;\n        try {\n            rootNode = mapper.readTree(Files.readAllBytes(Paths.get(path)));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Iterator<Map.Entry<String,JsonNode>> fieldsIterator = rootNode.fields();\n        while (fieldsIterator.hasNext()) {\n            Map.Entry<String,JsonNode> field = fieldsIterator.next();\n            //The key is the unknow ID, the value is the recipe\n            recipes.add(gson.fromJson(field.getValue().toString(), RecipeRaw.class));\n        }\n    }\n\n    /**\n     * Add recipes from full_format dataset\n     * @param recipes\n     * @param path\n     */\n    public static void addRecipes_full_format (List<RecipeRaw> recipes, String path)\n    {\n        Gson gson = new Gson();\n        RecipeRaw[] recipeList = null;\n        StringBuilder contentBuilder = new StringBuilder();\n        try {\n            Files.lines(Paths.get(path)).forEach(s -> contentBuilder.append(s));\n            recipeList = gson.fromJson(contentBuilder.toString(), RecipeRaw[].class);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Collections.addAll(recipes, recipeList);\n    }\n\n    /**\n     * Method that creates a new nodes in the graphDB with the information of the new users\n     * @param users      Users to add\n     */\n    public static void addUsers( final List<User> users)\n    {\n        Map<String,Object> params = new HashMap<>();\n        List<Map<String,Object>> list = new ArrayList<>();\n        for (User user: users)\n        {\n            Map<String,Object> props = new HashMap<>();\n            props.put( \"firstName\", user.getFirstName());\n            props.put( \"lastName\", user.getLastName());\n            props.put( \"username\", user.getUsername());\n            props.put( \"password\", user.getPassword());\n            list.add(props);\n        }\n        params.put( \"batch\", list );\n\n        try ( Session session = driver.session())\n        {\n            session.writeTransaction((TransactionWork<Void>) tx -> {\n                tx.run( \"UNWIND $batch AS row \" +\n                                \"MERGE (u:User {firstName: row.firstName, lastName: row.lastName, \" +\n                                \"username: row.username,\" +\n                                \"password: row.password, role:0})\",\n                        params);\n                return null;\n            });\n        }\n    }\n\n    /**\n     * Function that insert all the recipes, every one is associated at one user randomly picked\n     * @param recipeRaws    The list of the recipes\n     * @param users         The list of the users\n     */\n    public static void insertRecipesOfUsers (List<RecipeRaw> recipeRaws, List<User> users)\n    {\n        List<Document> documents = new ArrayList<Document>();\n        Date date = new Date();\n        Map<String,Object> params = new HashMap<>();\n        List<Map<String,Object>> list = new ArrayList<>();\n        Random random = new Random();\n        for (RecipeRaw rawRecipe: recipeRaws) // For every recipe\n        {\n            // pick-up randomly a user to associate with this recipe\n            int userIndex = random.nextInt(users.size()); //[0,19]\n            User user = users.get(userIndex);\n\n            // MongoDB part\n            String title = rawRecipe.getTitle();\n            Document doc = new Document(\"title\", title);\n            if (rawRecipe.getInstructions() != null)\n            {\n                doc.append(\"instructions\", rawRecipe.getInstructions());\n            }\n            else if (rawRecipe.getDirections() != null) // this recipe has the directions\n            {\n                String instructions = \"\";\n                for (String s : rawRecipe.getDirections())\n                {\n                    instructions += s + \"\\n\";\n                }\n                doc.append(\"instructions\", instructions);\n            }\n            if (rawRecipe.getIngredients() != null)\n                doc.append(\"ingredients\", rawRecipe.getIngredients());\n            if (rawRecipe.getCategories() != null)\n                doc.append(\"categories\", rawRecipe.getCategories());\n            if (rawRecipe.getCalories() != 0)\n                doc.append(\"calories\", rawRecipe.getCalories());\n            if (rawRecipe.getFat() != 0)\n                doc.append(\"fat\", rawRecipe.getFat());\n            if (rawRecipe.getProtein() != 0)\n                doc.append(\"protein\", rawRecipe.getProtein());\n            if (rawRecipe.getCarbs() != 0)\n                doc.append(\"carbs\", rawRecipe.getCarbs());\n            // For the timestamp MongoDB use the \"Date\"\n            doc.append(\"creationTime\", date);\n            doc.append(\"authorUsername\", user.getUsername());\n            documents.add(doc);\n\n            // Neo4j part\n            Map<String,Object> props = new HashMap<>();\n            props.put( \"username\", user.getUsername());\n            props.put(\"timestamp\", date.getTime());\n            props.put(\"title\", rawRecipe.getTitle());\n            if (rawRecipe.getCalories() != 0)\n                props.put(\"calories\", rawRecipe.getCalories());\n            if (rawRecipe.getFat() != 0)\n                props.put(\"fat\", rawRecipe.getFat());\n            if (rawRecipe.getProtein() != 0)\n                props.put(\"protein\", rawRecipe.getProtein());\n            if (rawRecipe.getCarbs() != 0)\n                props.put(\"carbs\", rawRecipe.getCarbs());\n            list.add(props);\n        }\n\n        // Mongo insert\n        collection.insertMany(documents);\n\n        // Neo4j insert\n        params.put( \"batch\", list );\n        try ( Session session = driver.session())\n        {\n            session.writeTransaction((TransactionWork<Void>) tx -> {\n                // First step: find the right user\n                // Second step: create the path ADDS and the recipe\n                tx.run( \"UNWIND $batch AS row \" +\n                                \"MATCH (u:User {username: row.username}) \" +\n                                \"CREATE (u)-[:ADDS {when: row.timestamp}]->(r:Recipe {title: row.title, calories: row.calories, \" +\n                                \"fat: row.fat, protein: row.protein, carbs: row.carbs})\",\n                        params);\n                return null;\n            });\n        }\n    }\n\n    /**\n     * Function used to delete all the nodes and the edges of the graph\n     */\n    public static void deleteAllGraph ()\n    {\n        try ( Session session = driver.session())\n        {\n            session.writeTransaction((TransactionWork<Void>) tx -> {\n                tx.run( \"MATCH (n) DETACH DELETE n\");\n                return null;\n            });\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../RecipeReader/src/main/java/Main.java b/../RecipeReader/src/main/java/Main.java
--- a/../RecipeReader/src/main/java/Main.java	(revision c091eab019e28a591b61c4836412a1037f7e95cd)
+++ b/../RecipeReader/src/main/java/Main.java	(date 1608221987626)
@@ -13,8 +13,8 @@
 
 public class Main {
     public static int HOW_MANY_RECIPES_TO_REMOVE = 30000;
-    public static String PATH_FULL_FORMAT_RECIPES = "C:/Users/danyc/Downloads/full_format_recipes/full_format_recipes.json";
-    public static String PATH_RECIPES_RAW_NOSOURCE_FN = "C:/Users/danyc/Downloads/recipes_raw/recipes_raw_nosource_fn.json";
+    public static String PATH_FULL_FORMAT_RECIPES = "/home/francesco/Scaricati/full_format_recipes/full_format_recipes.json";
+    public static String PATH_RECIPES_RAW_NOSOURCE_FN = "/home/francesco/Scaricati/recipes_raw/recipes_raw_nosource_fn.json";
 
     private static MongoClient mongoClient;
     private static MongoDatabase database;
