Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.utils;\n\nimport com.thoughtworks.xstream.XStream;\nimport it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController;\nimport it.unipi.dii.inginf.lsdb.justrecipe.controller.RecipeSnapshotController;\nimport it.unipi.dii.inginf.lsdb.justrecipe.controller.UserSnapshotController;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.User;\nimport javafx.event.Event;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Node;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Alert;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.validation.Schema;\nimport javax.xml.validation.SchemaFactory;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\n\n/**\n * Class that contains some useful method\n */\npublic class Utils {\n\n    /**\n     * Snippet of code for jumping in the next scene\n     * Every scene has associated its specific controller\n     * @param fileName      The name of the file in which i can obtain the GUI (.fxml)\n     * @param event         The event that leads to change the scene\n     * @return The new controller, because I need to pass some parameters\n     */\n    public static Object changeScene (String fileName, Event event)\n    {\n        Scene scene = null;\n        FXMLLoader loader = null;\n        try {\n            loader=new FXMLLoader(Utils.class.getResource(fileName));\n            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();\n            scene = new Scene(loader.load());\n            stage.setScene(scene);\n            stage.show();\n            return loader.getController();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    /**\n     * This function is used to read the config.xml file\n     * @return  ConfigurationParameters instance\n     */\n    public static ConfigurationParameters readConfigurationParameters ()\n    {\n        if (validConfigurationParameters())\n        {\n            XStream xs = new XStream();\n\n            String text = null;\n            try {\n                text = new String(Files.readAllBytes(Paths.get(\"./config.xml\")));\n            }\n            catch (Exception e) {\n                System.err.println(e.getMessage());\n            }\n\n            return (ConfigurationParameters) xs.fromXML(text);\n        }\n        else\n        {\n            System.exit(1); //If i can't read the configuration file I can't continue with the program\n        }\n        return null;\n    }\n\n    /**\n     * This function is used to validate the config.xml with the config.xsd\n     * @return  true if config.xml is well formatted, otherwise false\n     */\n    private static boolean validConfigurationParameters()\n    {\n        try\n        {\n            DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n            Document document = documentBuilder.parse(\"./config.xml\");\n            Schema schema = schemaFactory.newSchema(new StreamSource(\"./config.xsd\"));\n            schema.newValidator().validate(new DOMSource(document));\n        }\n        catch (Exception e)\n        {\n            if (e instanceof SAXException)\n                System.out.println(\"Validation Error: \" + e.getMessage());\n            else\n                System.out.println(e.getMessage());\n\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Function used to get the string representation of a List<String>, with every element separated by comma\n     * @param list  the list to transform\n     * @return      the string representation\n     */\n    public static String fromListToString (List<String> list)\n    {\n        String string = \"\";\n        if (list != null)\n        {\n            Iterator<String> iterator = list.iterator();\n            while (iterator.hasNext())\n            {\n                string = string.concat(iterator.next());\n                if (iterator.hasNext())\n                {\n                    string = string.concat(\", \");\n                }\n            }\n        }\n        return string;\n    }\n\n    /**\n     * Function used to transform a string in an list of string, divided by comma\n     * @param string        String to consider\n     * @return              A list of the substring\n     */\n    public static List<String> fromStringToList (String string)\n    {\n        List<String> list = new ArrayList<>();\n        list = Arrays.asList(string.split(\",\"));\n        return list;\n    }\n\n    /**\n     * Function that transform a Date object in the standard format chosen for the application\n     * @param date\n     * @return\n     */\n    public static String fromDateToString (Date date)\n    {\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        return dateFormat.format(date);\n    }\n\n    /**\n     * Function that shows an error alert\n     * @param text  Text to be shown\n     */\n    public static void showErrorAlert (String text)\n    {\n        Alert alert = new Alert(Alert.AlertType.ERROR);\n        alert.setContentText(text);\n        alert.setHeaderText(\"Ops.. Something went wrong..\");\n        alert.setTitle(\"Error\");\n        ImageView imageView = new ImageView(new Image(\"/img/emoticon-cry.png\"));\n        alert.setGraphic(imageView);\n        alert.show();\n    }\n\n    /**\n     * Function that shows an information windows\n     * @param text  Text to be shown\n     */\n    public static void showInfoAlert (String text)\n    {\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setContentText(text);\n        alert.setHeaderText(\"Important Message\");\n        alert.setTitle(\"Information\");\n        ImageView imageView = new ImageView(new Image(\"/img/info.png\"));\n        imageView.setFitHeight(45);\n        imageView.setFitWidth(45);\n        imageView.setPreserveRatio(true);\n        alert.setGraphic(imageView);\n        alert.show();\n    }\n\n    /**\n     * This function create a pane that contains a recipe snapshot\n     * @param recipe    recipe to display in the snapshot\n     * @return\n     */\n    private static Pane createRecipeSnapshot(Recipe recipe)\n    {\n        Pane pane = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(Utils.class.getResource(\"/recipeSnap.fxml\"));\n            pane = (Pane) loader.load();\n            RecipeSnapshotController recipeSnapshotController =\n                    (RecipeSnapshotController) loader.getController();\n            recipeSnapshotController.setRecipe(recipe);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return pane;\n    }\n\n    /**\n     * Function that adds the snapshots of the recipes, 2 for each row\n     * @param vBox      VBox in which I have to show the snapshots\n     * @param recipes   Recipes to show\n     */\n    public static void addRecipesSnap(VBox vBox, List<Recipe> recipes) {\n        Iterator<Recipe> iterator = recipes.iterator();\n        while (iterator.hasNext())\n        {\n            HBox row = new HBox();\n            row.setStyle(\"-fx-padding: 10px\");\n            row.setSpacing(20);\n            Recipe recipe1 = iterator.next();\n            Pane rec1 = createRecipeSnapshot(recipe1);\n            row.getChildren().add(rec1);\n            if (iterator.hasNext())\n            {\n                Recipe recipe2 = iterator.next();\n                Pane rec2 = createRecipeSnapshot(recipe2);\n                row.getChildren().add(rec2);\n            }\n            vBox.getChildren().add(row);;\n        }\n    }\n\n    /**\n     * Function used to show the comments\n     * @param vBox      VBox in which I have to show the comments\n     * @param comments  Comments to show\n     */\n    public static void showComments(VBox vBox, List<Comment> comments) {\n        Iterator<Comment> iterator = comments.iterator();\n        vBox.setSpacing(20);\n        while (iterator.hasNext())\n        {\n            Comment comment = iterator.next();\n            Pane commentPane = loadComment(comment);\n            vBox.getChildren().add(commentPane);\n        }\n    }\n\n    /**\n     * Function used to show one comment\n     * @param pane      Pane in which I have to show the comments\n     * @param comment  Comments to show\n     */\n    public static void showComment(Pane pane, Comment comment){\n        Pane commentPane = loadComment(comment);\n        pane.getChildren().add(commentPane);\n    }\n\n    /**\n     * Function used to load the .fxml for the comment\n     * @param comment   Comment to show\n     * @return          The pane in which I have showed the comment\n     */\n    private static Pane loadComment (Comment comment)\n    {\n        Pane pane = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(Utils.class.getResource(\"/comment.fxml\"));\n            pane = (Pane) loader.load();\n            CommentController commentController =\n                    (CommentController) loader.getController();\n            commentController.setComment(comment);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return pane;\n    }\n\n    /**\n     * Function used to load the .fxml for the snapshot of the user\n     * @param user      User to load\n     * @return          The pane in which the snapshot has been loaded\n     */\n    private static Pane loadUserSnapshot (User user)\n    {\n        Pane pane = null;\n        try {\n            FXMLLoader loader = new FXMLLoader(Utils.class.getResource(\"/userSnap.fxml\"));\n            pane = (Pane) loader.load();\n            UserSnapshotController userSnapshotController =\n                    (UserSnapshotController) loader.getController();\n            userSnapshotController.setUserSnap(user);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return pane;\n    }\n\n    /**\n     * Function that load the snapshot of the users in the pane\n     * There will be four snapshot for each row (if possible)\n     * @param vBox          VBox in which the snapshot has to be inserted\n     * @param users         The users to show\n     */\n    public static void addUsersSnap(VBox vBox, List<User> users) {\n        Iterator<User> iterator = users.iterator();\n        while (iterator.hasNext())\n        {\n            HBox row = new HBox();\n            row.setStyle(\"-fx-padding: 10px\");\n            row.setSpacing(10);\n            User user1 = iterator.next();\n            Pane pane1 = loadUserSnapshot (user1);\n            row.getChildren().add(pane1);\n            if (iterator.hasNext())\n            {\n                User user2 = iterator.next();\n                Pane pane2 = loadUserSnapshot (user2);\n                row.getChildren().add(pane2);\n\n                if (iterator.hasNext())\n                {\n                    User user3 = iterator.next();\n                    Pane pane3 = loadUserSnapshot (user3);\n                    row.getChildren().add(pane3);\n\n                    if (iterator.hasNext())\n                    {\n                        User user4 = iterator.next();\n                        Pane pane4 = loadUserSnapshot (user4);\n                        row.getChildren().add(pane4);\n                    }\n                }\n            }\n            vBox.getChildren().add(row);\n        }\n    }\n\n    /**\n     * Function used to remove all element on a pane\n     * @param pane      Pane to free\n     */\n    public static void removeAllFromPane (Pane pane)\n    {\n        pane.getChildren().remove(0, pane.getChildren().size());\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/utils/Utils.java	(date 1608559619622)
@@ -246,13 +246,13 @@
      * @param vBox      VBox in which I have to show the comments
      * @param comments  Comments to show
      */
-    public static void showComments(VBox vBox, List<Comment> comments) {
+    public static void showComments(VBox vBox, List<Comment> comments, String recipeTitle) {
         Iterator<Comment> iterator = comments.iterator();
         vBox.setSpacing(20);
         while (iterator.hasNext())
         {
             Comment comment = iterator.next();
-            Pane commentPane = loadComment(comment);
+            Pane commentPane = loadComment(comment, recipeTitle);
             vBox.getChildren().add(commentPane);
         }
     }
@@ -262,8 +262,8 @@
      * @param pane      Pane in which I have to show the comments
      * @param comment  Comments to show
      */
-    public static void showComment(Pane pane, Comment comment){
-        Pane commentPane = loadComment(comment);
+    public static void showComment(Pane pane, Comment comment, String recipeName){
+        Pane commentPane = loadComment(comment, recipeName);
         pane.getChildren().add(commentPane);
     }
 
@@ -272,7 +272,7 @@
      * @param comment   Comment to show
      * @return          The pane in which I have showed the comment
      */
-    private static Pane loadComment (Comment comment)
+    private static Pane loadComment (Comment comment, String recipeName)
     {
         Pane pane = null;
         try {
@@ -280,7 +280,8 @@
             pane = (Pane) loader.load();
             CommentController commentController =
                     (CommentController) loader.getController();
-            commentController.setComment(comment);
+            commentController.setComment(comment, recipeName);
+//            commentController.setRecipeName(recipeName);                                                              //DEBUG
         } catch (IOException e) {
             e.printStackTrace();
         }
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.persistence;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport com.mongodb.ConnectionString;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.client.*;\nimport com.mongodb.client.model.Accumulators;\nimport com.mongodb.client.model.Aggregates;\nimport com.mongodb.client.model.Filters;\nimport com.mongodb.client.model.Sorts;\nimport it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.*;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport org.bson.Document;\nimport org.bson.codecs.configuration.CodecRegistry;\nimport org.bson.codecs.pojo.PojoCodecProvider;\nimport org.bson.conversions.Bson;\nimport java.lang.reflect.Type;\nimport java.util.*;\nimport java.util.function.Consumer;\nimport java.util.regex.Pattern;\n\nimport static com.mongodb.client.model.Aggregates.*;\nimport static com.mongodb.client.model.Filters.eq;\nimport static com.mongodb.client.model.Projections.*;\nimport static com.mongodb.client.model.Projections.include;\nimport static com.mongodb.client.model.Sorts.ascending;\nimport static com.mongodb.client.model.Sorts.descending;\nimport static org.bson.codecs.configuration.CodecRegistries.fromProviders;\nimport static org.bson.codecs.configuration.CodecRegistries.fromRegistries;\n\n/**\n * This class is used to communicate with MongoDB\n */\npublic class MongoDBDriver implements DatabaseDriver{\n    private static MongoDBDriver instance;\n\n    private MongoClient mongoClient;\n    private MongoDatabase database;\n    private MongoCollection collection;\n    private CodecRegistry pojoCodecRegistry;\n    private String ip;\n    private int port;\n    private String username;\n    private String password;\n    private String dbName;\n\n    public static MongoDBDriver getInstance() {\n        if (instance == null)\n        {\n            instance = new MongoDBDriver(Utils.readConfigurationParameters());\n        }\n        return instance;\n    }\n\n    /**\n     * Consumer function that prints the document in json format\n     */\n    private Consumer<Document> printDocuments = doc -> {\n        System.out.println(doc.toJson());\n    };\n\n    private MongoDBDriver (ConfigurationParameters configurationParameters)\n    {\n        this.ip = configurationParameters.getMongoIp();\n        this.port = configurationParameters.getMongoPort();\n        this.username = configurationParameters.getMongoUsername();\n        this.password = configurationParameters.getMongoPassword();\n        this.dbName = configurationParameters.getMongoDbName();\n        initConnection();\n        chooseCollection(\"recipe\");\n    }\n\n    /**\n     * Method that inits the MongoClient and choose the correct database\n     */\n    @Override\n    public void initConnection() {\n        ConnectionString connectionString;\n        if (!username.equals(\"\")) // if there are access rules\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + username + \":\" + password\n                    + \"@\" + ip + \":\" + port);\n        }\n        else // standard access\n        {\n            connectionString = new ConnectionString(\"mongodb://\" + ip + \":\" + port);\n        }\n        mongoClient = MongoClients.create(connectionString);\n        database = mongoClient.getDatabase(dbName);\n        pojoCodecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(),\n                fromProviders(PojoCodecProvider.builder().automatic(true).build()));\n    }\n\n    /**\n     * Method used to close the connection\n     */\n    @Override\n    public void closeConnection() {\n        if (mongoClient != null)\n            mongoClient.close();\n    }\n\n    /**\n     * Add a new recipe in MongoDB\n     * @param r The object Recipe which contains all the necessary information about it\n     */\n    public void addRecipe(Recipe r)\n    {\n        Document doc = new Document(\"title\",r.getTitle())\n                .append(\"instructions\",r.getInstructions())\n                .append(\"ingredients\",r.getIngredients());\n        // Optional fields\n        if(!r.getCategories().isEmpty())\n            doc.append(\"categories\",r.getCategories());\n        if(r.getCalories()!=-1)\n            doc.append(\"calories\",r.getCalories());\n        if(r.getFat()!=-1)\n            doc.append(\"fat\",r.getFat());\n        if(r.getProtein()!=-1)\n            doc.append(\"protein\",r.getProtein());\n        if(r.getCarbs()!=-1)\n            doc.append(\"carbs\",r.getCarbs());\n        // Automatic fields\n        doc.append(\"creationTime\",new Date(r.getCreationTime().getTime()))\n                .append(\"authorUsername\",r.getAuthorUsername());\n        // Other option field\n        if(!r.getPicture().isEmpty())\n            doc.append(\"picture\",r.getPicture());\n\n        collection.insertOne(doc);\n    }\n    /**\n     * Method used to change the collection\n     * @param name  name of the new collection\n     */\n    public void chooseCollection(String name)\n    {\n        collection = database.getCollection(name);\n    }\n\n    public List<Recipe> getRecipesFromAuthorUsername(int howManySkip, int howMany, String username){\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        List<Document> results = new ArrayList<>();\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        Bson match = match(eq(\"authorUsername\", username));\n        results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the recipe given the title\n     * @param title     Title of the recipe\n     * @return          The recipe\n     */\n    public Recipe getRecipeFromTitle(String title){\n        Recipe recipe = null;\n        Gson gson = new Gson();\n        Type recipeType = new TypeToken<Recipe>(){}.getType();\n        Document myDoc =(Document) collection.find(eq(\"title\", title)).first();\n        recipe = gson.fromJson(gson.toJson(myDoc), recipeType);\n        return recipe;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes that contains in their title the title inserted by the user\n     * @param title         Title to check\n     * @param howManySkip   How many to skip\n     * @param howMany       How many recipe we want obtain\n     * @return              The list of the recipes that match the condition\n     */\n    public List<Recipe> searchRecipesFromTitle (String title, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Pattern pattern = Pattern.compile(\"^.*\" + title + \".*$\", Pattern.CASE_INSENSITIVE);\n        Bson match = Aggregates.match(Filters.regex(\"title\", pattern));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that returns a list of recipes that contains the category passed (or one piece of that)\n     * @param category          Category to search\n     * @param howManySkip       How many to skip\n     * @param howMany           How many to obtain\n     * @return                  The list of recipes\n     */\n    public List<Recipe> searchRecipesFromCategory (String category, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Pattern pattern = Pattern.compile(\"^.*\" + category + \".*$\", Pattern.CASE_INSENSITIVE);\n        Bson match = match(Filters.regex(\"categories\", pattern));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>) collection.aggregate(Arrays.asList(match, sort, skip, limit))\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that returns the recipes that contains the ingredients passed as argument\n     * @param ingredients       Ingredients to check\n     * @param howManySkip       How many recipe to skip\n     * @param howMany           How many recipe to obtain\n     * @return                  List of recipes\n     */\n    public List<Recipe> searchRecipesFromIngredients (List<String> ingredients, int howManySkip, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        List<Bson> bsons = new ArrayList<Bson>();\n        for (String ingredient: ingredients)\n        {\n            Pattern pattern = Pattern.compile(\"^.*\" + ingredient + \".*$\", Pattern.CASE_INSENSITIVE);\n            bsons.add(match(Filters.regex(\"ingredients\", pattern)));\n        }\n        bsons.add(sort(descending(\"creationTime\")));\n        bsons.add(skip(howManySkip));\n        bsons.add(limit(howMany));\n        List<Document> results = (List<Document>) collection.aggregate(bsons)\n                .into(new ArrayList<>());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function that return the most common categories (the top one used)\n     * @param howManySkip           How many to skip\n     * @param howManyCategories     How many category to consider in the rank\n     * @return                      The category ordered by the number of recipes in which it is used\n     */\n    public List<String> searchMostCommonRecipeCategories (int howManySkip, int howManyCategories)\n    {\n        List<String> mostCommonCategories = new ArrayList<>();\n        Bson unwind = unwind(\"$categories\");\n        Bson group = group(\"$categories\", Accumulators.sum(\"numberOfRecipes\", 1));\n        Bson project = project(fields(computed(\"categories\", \"$_id\"), excludeId(), include(\"numberOfRecipes\")));\n        Bson sort = sort(descending(\"numberOfRecipes\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howManyCategories);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(unwind, group, project, sort, skip, limit)).into(new ArrayList());\n\n        for (Document document: results)\n        {\n            mostCommonCategories.add(document.getString(\"categories\"));\n        }\n        return mostCommonCategories;\n    }\n\n    /**\n     * Function that returns \"howMany\" recipes of one category\n     * @param category      The category to consider\n     * @param howMany       How many recipes to return\n     * @return              List of the recipes\n     */\n    public List<Recipe> getRecipesOfCategory (String category, int howMany)\n    {\n        List<Recipe> recipes = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson match = match(Filters.in(\"categories\", category));\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson limit = limit(howMany);\n        List<Document> results = (List<Document>)\n                collection.aggregate(Arrays.asList(match, sort, limit)).into(new ArrayList());\n        Type recipeListType = new TypeToken<ArrayList<Recipe>>(){}.getType();\n        recipes = gson.fromJson(gson.toJson(results), recipeListType);\n        return recipes;\n    }\n\n    /**\n     * Function for searching all the comments, ordered by the creationTime (first the last)\n     * The list will be useful for the moderators\n     * @param howManySkip   How many to skip\n     * @param howMany       How many comments we want obtain\n     * @return              The list of the comments\n     */\n    public List<Comment> searchAllComments (int howManySkip, int howMany)\n    {\n        List<Comment> comments = new ArrayList<>();\n        Gson gson = new Gson();\n        Bson unwind = unwind(\"$comments\");\n        Bson sort = sort(descending(\"creationTime\"));\n        Bson skip = skip(howManySkip);\n        Bson limit = limit(howMany);\n        MongoCursor<Document> iterator = (MongoCursor<Document>)\n                collection.aggregate(Arrays.asList(unwind, sort, skip, limit)).iterator();\n        while (iterator.hasNext())\n        {\n            Document document = (Document) iterator.next().get(\"comments\");\n            Comment comment = gson.fromJson(gson.toJson(document), Comment.class);\n            comments.add(comment);\n        }\n        return comments;\n    }\n\n    public void updateComments(String title, List<Comment> comments){\n        collection = collection.withCodecRegistry(pojoCodecRegistry);\n        Bson update = new Document(\"comments\", comments);\n        Bson updateOperation = new Document(\"$set\", update);\n        collection.updateOne(new Document(\"title\", title), updateOperation);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/persistence/MongoDBDriver.java	(date 1608575254849)
@@ -1,17 +1,19 @@
 package it.unipi.dii.inginf.lsdb.justrecipe.persistence;
 
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectWriter;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import com.mongodb.ConnectionString;
 import com.mongodb.MongoClientSettings;
 import com.mongodb.client.*;
-import com.mongodb.client.model.Accumulators;
-import com.mongodb.client.model.Aggregates;
-import com.mongodb.client.model.Filters;
-import com.mongodb.client.model.Sorts;
+import com.mongodb.client.model.*;
+import com.mongodb.client.result.UpdateResult;
 import it.unipi.dii.inginf.lsdb.justrecipe.config.ConfigurationParameters;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.*;
 import it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;
+import org.bson.BsonDocument;
 import org.bson.Document;
 import org.bson.codecs.configuration.CodecRegistry;
 import org.bson.codecs.pojo.PojoCodecProvider;
@@ -317,6 +319,73 @@
         collection = collection.withCodecRegistry(pojoCodecRegistry);
         Bson update = new Document("comments", comments);
         Bson updateOperation = new Document("$set", update);
-        collection.updateOne(new Document("title", title), updateOperation);
+        UpdateResult updateResult = collection.updateOne(new Document("title", title), updateOperation);
+//        System.out.println(updateOperation.toBsonDocument(BsonDocument.class, pojoCodecRegistry));
+        System.out.println(updateResult);
     }
+
+    public void deleteComments(){}
+
+    public void deleteComment(String title, Comment comment){
+        List<Comment> comments = new ArrayList<Comment>();
+        comments = getRecipeFromTitle(title).getComments();
+        System.out.println(comments);
+        System.out.println(comment);
+        System.out.println(comments.remove(comment));
+        int i=0;
+        int k=0;
+        for (Comment c: comments) {
+            if(c.getCreationTime().equals(comment.getCreationTime()) &&
+                    c.getAuthorUsername().equals(comment.getAuthorUsername())){
+                k=i;
+                break;
+            }
+            i++;
+        }
+        comments.remove(k);
+        System.out.println(comments);
+        updateComments(title, comments);
+    }
+
+    public void addComment(String title, Comment comment){
+        List<Comment> comments = getRecipeFromTitle(title).getComments();
+        if(comments != null)
+            comments.add(comment);
+        else {
+            comments = new ArrayList<>();
+            comments.add(comment);
+        }
+        updateComments(title, comments);
+    }
+//    public void deleteComment(Comment comment, String title){
+//        collection = collection.withCodecRegistry(pojoCodecRegistry);
+////        Bson pull = Updates.pull("comments", comment);
+////        UpdateResult result = collection.updateOne(new Document("title", title), pull);
+//        Recipe rec = getRecipeFromTitle(title);
+//        System.out.println("Into delete comment: \n" + rec.getTitle() + rec.getComments());                             //DEBUG
+//        System.out.println(title + comment);                                                                            //debug
+//        Bson query = new Document().append("title", title);
+//        Bson fields = new Document().append("comments", comment);
+//        Bson update = new Document("$pull", fields);
+//        Bson fields2 = new Document().append("comments",new Document().append("creationTime", comment.getCreationTime()));
+//        update = new Document("$pull", fields2);
+//        UpdateResult result = collection.updateOne(query, update);
+//        System.out.println(result);                                                                                     //debug
+//        System.out.println(update.toBsonDocument(BsonDocument.class, pojoCodecRegistry));
+//    }
+
+//    public void addComment(Comment comment, String title){
+//        List<Comment> comments = new ArrayList<>();
+//        collection = collection.withCodecRegistry(pojoCodecRegistry);
+////        comments.add(comment);
+////        Bson updateOperation = new Document("$set", update);
+////        ObjectWriter writer = new ObjectMapper().writer().withDefaultPrettyPrinter();
+////        String comm = writer.writeValueAsString(comment);
+////        Gson gson = new Gson();
+////        Comment comCon = gson.fromJson(comm, Comment.class);
+////        Bson update = new Document("comment", comment);
+//        Bson push = Updates.push("comments", comment);
+////        collection.updateOne(new Document("title", title), push, new UpdateOptions().upsert(true));
+//        collection.updateOne(new Document("title", title), push);
+//    }
 }
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/DiscoveryPageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.controller;\n\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Session;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.User;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.MongoDBDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.ComboBox;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextField;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Font;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DiscoveryPageController {\n    private Neo4jDriver neo4jDriver;\n    private MongoDBDriver mongoDBDriver;\n    @FXML private ImageView homepageIcon;\n    @FXML private ImageView profilePageIcon;\n    @FXML private ImageView logoutPic;\n    @FXML private Button searchButton;\n    @FXML private TextField searchBarTextField;\n    @FXML private ComboBox searchComboBox;\n    @FXML private VBox discoveryVBox;\n    @FXML private Button nextButton;\n    @FXML private Button previousButton;\n\n    private final int HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW = 20;\n    private final int HOW_MANY_USER_SNAPSHOT_TO_SHOW = 20;\n    private final int HOW_MANY_MOST_COMMON_CATEGORIES_TO_SHOW = 5;\n    private final int HOW_MANY_SNAPSHOT_FOR_EACH_COMMON_CATEGORY = 4;\n    private final int HOW_MANY_COMMENTS_TO_SHOW = 20;\n    private int page; // number of page (at the beginning at 0), increase with nextButton and decrease with previousButton\n\n    public void initialize ()\n    {\n        neo4jDriver = Neo4jDriver.getInstance();\n        mongoDBDriver = MongoDBDriver.getInstance();\n        homepageIcon.setOnMouseClicked(mouseEvent -> clickOnHomepageToChangePage(mouseEvent));\n        profilePageIcon.setOnMouseClicked(mouseEvent -> clickOnProfImgToChangePage(mouseEvent));\n        logoutPic.setOnMouseClicked(mouseEvent -> clickOnLogoutImg(mouseEvent));\n        page = 0;\n\n        // Initializing the options of the ComboBox\n        ObservableList<String> options =\n                FXCollections.observableArrayList(\n                        \"Recipe title\",\n                        \"Recipe category\",\n                        \"Recipe ingredients\",\n                        \"Most common recipe categories\",\n                        \"Best recipes\",\n                        \"User username\",\n                        \"User full name\",\n                        \"Most followed and active user\",\n                        \"Top Commentators\",\n                        \"Most liked user\",\n                        \"Last comments\" // To show only if the user is a moderator\n                );\n        searchComboBox.setItems(options);\n        // if some changes happens to the combobox\n        searchComboBox.setOnAction(actionEvent -> comboAction((ActionEvent) actionEvent));\n        searchButton.setOnAction(actionEvent -> search(actionEvent));\n\n        nextButton.setOnMouseClicked(mouseEvent -> clickOnNext(mouseEvent));\n        previousButton.setOnMouseClicked(mouseEvent -> clickOnPrevious(mouseEvent));\n        previousButton.setVisible(false); //in the first page it is not visible\n    }\n\n    private void search(ActionEvent actionEvent) {\n        Utils.removeAllFromPane(discoveryVBox);\n        if (String.valueOf(searchComboBox.getValue()).equals(\"Recipe title\"))\n        {\n            List<Recipe> recipes = mongoDBDriver.searchRecipesFromTitle(searchBarTextField.getText(),\n                    HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW*page, HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW);\n            Utils.addRecipesSnap(discoveryVBox, recipes);\n        }\n        if (String.valueOf(searchComboBox.getValue()).equals(\"Recipe category\"))\n        {\n            List<Recipe> recipes = mongoDBDriver.searchRecipesFromCategory (searchBarTextField.getText(),\n                    HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW*page, HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW);\n            Utils.addRecipesSnap(discoveryVBox, recipes);\n        }\n        if (String.valueOf(searchComboBox.getValue()).equals(\"Recipe ingredients\"))\n        {\n            List<String> ingredientsList = Utils.fromStringToList(searchBarTextField.getText());\n            List<Recipe> recipes = mongoDBDriver.searchRecipesFromIngredients (ingredientsList,\n                    HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW*page, HOW_MANY_RECIPE_SNAPSHOT_TO_SHOW);\n            Utils.addRecipesSnap(discoveryVBox, recipes);\n        }\n        else if (String.valueOf(searchComboBox.getValue()).equals(\"Most common recipe categories\"))\n        {\n            List<String> mostCommonRecipeCategories = mongoDBDriver.searchMostCommonRecipeCategories(\n                            HOW_MANY_MOST_COMMON_CATEGORIES_TO_SHOW*page,\n                            HOW_MANY_MOST_COMMON_CATEGORIES_TO_SHOW);\n            for (String category: mostCommonRecipeCategories)\n            {\n                Label categoryName = new Label();\n                categoryName.setText(category.concat(\"\\n\"));\n                categoryName.setFont(Font.font(48));\n                discoveryVBox.getChildren().add(categoryName);\n                List<Recipe> recipes = mongoDBDriver.getRecipesOfCategory(category,\n                        HOW_MANY_SNAPSHOT_FOR_EACH_COMMON_CATEGORY);\n                Utils.addRecipesSnap(discoveryVBox, recipes);\n            }\n        }\n        else if (String.valueOf(searchComboBox.getValue()).equals(\"User username\"))\n        {\n            List<User> users = neo4jDriver.searchUserByUsername(HOW_MANY_USER_SNAPSHOT_TO_SHOW*page,\n                    HOW_MANY_USER_SNAPSHOT_TO_SHOW, searchBarTextField.getText());\n            Utils.addUsersSnap(discoveryVBox, users);\n        }\n        else if (String.valueOf(searchComboBox.getValue()).equals(\"User full name\"))\n        {\n            List<User> users = neo4jDriver.searchUserByFullName(HOW_MANY_USER_SNAPSHOT_TO_SHOW*page,\n                    HOW_MANY_USER_SNAPSHOT_TO_SHOW, searchBarTextField.getText());\n            Utils.addUsersSnap(discoveryVBox, users);\n        }\n        // For the moderator\n        else if (String.valueOf(searchComboBox.getValue()).equals(\"Last comments\"))\n        {\n            List<Comment> comments = mongoDBDriver.searchAllComments(\n                    HOW_MANY_COMMENTS_TO_SHOW*page, HOW_MANY_COMMENTS_TO_SHOW);\n            Utils.showComments(discoveryVBox, comments);\n        }\n    }\n\n\n    /**\n     * Function that let the navigation into the ui ---> homepage\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnHomepageToChangePage(MouseEvent mouseEvent){\n        try{\n            HomePageController homePageController = (HomePageController)\n                    Utils.changeScene(\"/homepage.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"homePageController is null!!!!\");}\n    }\n\n    /**\n     * Function that let the logout action, by going into the welcome page\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnLogoutImg(MouseEvent mouseEvent){\n        try {\n            WelcomePageController welcomePageController = (WelcomePageController)\n                    Utils.changeScene(\"/welcome.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"profilePageController is null!!!!\");}\n    }\n\n    /**\n     * Function that let the navigation into the ui ---> profilePage\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnProfImgToChangePage(MouseEvent mouseEvent){\n        try {\n            ProfilePageController profilePageController = (ProfilePageController)\n                    Utils.changeScene(\"/profilePage.fxml\", mouseEvent);\n            profilePageController.setProfile(Session.getInstance().getLoggedUser());\n        }catch (NullPointerException n){System.out.println(\"profilePageController is null!!!!\");}\n    }\n\n    /**\n     * Function that handle the changes to the searchComboBox\n     * @param event\n     */\n    private void comboAction(ActionEvent event) {\n        page = 0;\n        Utils.removeAllFromPane(discoveryVBox);\n    }\n\n    /**\n     * Handler for the next button\n     * @param mouseEvent    Events that leads to this function\n     */\n    private void clickOnNext(MouseEvent mouseEvent) {\n        page++;\n        if (page > 0)\n            previousButton.setVisible(true);\n        searchButton.fire(); // simulate the click of the button\n    }\n\n    /**\n     * Handler for the previous button\n     * @param mouseEvent    Events that leads to this function\n     */\n    private void clickOnPrevious(MouseEvent mouseEvent) {\n        page--;\n        if (page < 1)\n            previousButton.setVisible(false);\n        searchButton.fire(); // simulate the click of the button\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/DiscoveryPageController.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/DiscoveryPageController.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/DiscoveryPageController.java	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/DiscoveryPageController.java	(date 1608559619652)
@@ -130,7 +130,8 @@
         {
             List<Comment> comments = mongoDBDriver.searchAllComments(
                     HOW_MANY_COMMENTS_TO_SHOW*page, HOW_MANY_COMMENTS_TO_SHOW);
-            Utils.showComments(discoveryVBox, comments);
+            Utils.showComments(discoveryVBox, comments, new String());
+            //new string where should be recipeName,which here is useless o point out the correct recipe name
         }
     }
 
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.controller;\n\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Session;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\n\n/**\n * Controller for the single comment\n */\npublic class CommentController {\n\n    @FXML private Label commentDate;\n    @FXML private Label commentUsername;\n    @FXML private TextArea commentTextArea;\n    @FXML private Button commentModifyButton;\n    @FXML private Button commentDeleteButton;\n    @FXML private Button commentSaveButton;\n\n    private Comment comment;\n    private Session appSession;\n\n\n    public void initialize ()\n    {\n        appSession = Session.getInstance();\n    }\n\n    public void setComment(Comment comment) {\n        this.comment = comment;\n        commentDate.setText(\"Written at: \" + Utils.fromDateToString(comment.getCreationTime()));\n        commentUsername.setText(\"By: \" + comment.getAuthorUsername());\n        commentTextArea.setText(comment.getText());\n\n        if((appSession.getLoggedUser().getRole()!=0) || (appSession.getLoggedUser().getUsername().equals(comment.getAuthorUsername())))\n            commentDeleteButton.setOnMouseClicked(mouseEvent -> Neo4jDriver.getInstance().deleteComment(comment.getAuthorUsername(),comment.getCreationTime()));\n        else\n            commentDeleteButton.setVisible(false);\n\n        if(appSession.getLoggedUser().getUsername().equals(comment.getAuthorUsername()))\n            commentModifyButton.setOnMouseClicked(mouseEvent -> Neo4jDriver.getInstance().editComment(comment.getAuthorUsername(),comment.getCreationTime()));\n        else\n            commentModifyButton.setVisible(false);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/CommentController.java	(date 1608575961379)
@@ -2,12 +2,17 @@
 
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Session;
+import it.unipi.dii.inginf.lsdb.justrecipe.persistence.MongoDBDriver;
 import it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;
 import it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;
+import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
+import javafx.scene.AccessibleAction;
 import javafx.scene.control.Button;
 import javafx.scene.control.Label;
 import javafx.scene.control.TextArea;
+import javafx.scene.input.MouseEvent;
+import javafx.scene.layout.VBox;
 
 /**
  * Controller for the single comment
@@ -20,18 +25,31 @@
     @FXML private Button commentModifyButton;
     @FXML private Button commentDeleteButton;
     @FXML private Button commentSaveButton;
+    @FXML private VBox commentVBox;
 
     private Comment comment;
+    private String recipeName;
     private Session appSession;
 
 
     public void initialize ()
     {
         appSession = Session.getInstance();
+        commentDeleteButton.setOnAction(mouseEvent -> deleteButtonAction(mouseEvent));
+    }
+
+    /**
+     * Trigger the delete comment action (from DB), and remove it from the UI
+     * @param mouseEvent
+     */
+    public void deleteButtonAction(ActionEvent mouseEvent){
+        commentVBox.getChildren().remove(0,commentVBox.getChildren().size());
+        MongoDBDriver.getInstance().deleteComment(recipeName, comment);
     }
 
-    public void setComment(Comment comment) {
+    public void setComment(Comment comment, String recipeName) {
         this.comment = comment;
+        this.recipeName = recipeName;
         commentDate.setText("Written at: " + Utils.fromDateToString(comment.getCreationTime()));
         commentUsername.setText("By: " + comment.getAuthorUsername());
         commentTextArea.setText(comment.getText());
Index: src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.unipi.dii.inginf.lsdb.justrecipe.controller;\n\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;\nimport it.unipi.dii.inginf.lsdb.justrecipe.model.Session;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.MongoDBDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.persistence.Neo4jDriver;\nimport it.unipi.dii.inginf.lsdb.justrecipe.utils.Utils;\nimport javafx.event.ActionEvent;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.geometry.Pos;\nimport javafx.scene.AccessibleAction;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.Pane;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Font;\nimport javafx.scene.text.Text;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.List;\n\n/**\n * Controller for the page of the recipe\n */\npublic class RecipePageController {\n\n    @FXML private ImageView homeImg;\n    @FXML private ImageView discoveryImg;\n    @FXML private ImageView profileImg;\n    @FXML private Text recipeInstructions;\n    @FXML private ImageView recipeLikeImg;\n    @FXML private ImageView recipePicture;\n    @FXML private ImageView logoutPic;\n    @FXML private Text recipeTitle;\n    @FXML private Text recipeUsername;\n    @FXML private Text recipeCarbs;\n    @FXML private Text recipeCalories;\n    @FXML private Text recipeFat;\n    @FXML private ImageView recipeEditImg;\n    @FXML private Text recipeCategories;\n    @FXML private Text recipeIngredients;\n    @FXML private Text recipeProtein;\n    @FXML private Label recipeLikes;\n    @FXML private Label recipeDate;\n    @FXML private VBox recipeVBox;\n    @FXML private ImageView recipeDelete;\n    @FXML private TextArea commentsArea;\n    @FXML private Button sendButton;\n    @FXML private Button cancelButton;\n\n    private Recipe recipe;\n    private Session appSession;\n    private Neo4jDriver neo4jDriver;\n    private MongoDBDriver mongoDBDriver;\n\n    public void initialize ()\n    {\n        homeImg.setOnMouseClicked(mouseEvent -> clickOnHomepageToChangePage(mouseEvent));\n        profileImg.setOnMouseClicked(mouseEvent -> clickOnProfileToChangePage(mouseEvent));\n        discoveryImg.setOnMouseClicked(mouseEvent -> clickOnDiscoveryToChangePage(mouseEvent));\n        logoutPic.setOnMouseClicked(mouseEvent -> clickOnLogoutImg(mouseEvent));\n        recipeVBox.setAlignment(Pos.CENTER);\n        appSession = Session.getInstance();\n        neo4jDriver = Neo4jDriver.getInstance();\n        mongoDBDriver = MongoDBDriver.getInstance();\n        sendButton.setOnAction(actionEvent -> handleSendButtonAction(actionEvent));\n        cancelButton.setOnAction(actionEvent -> handleCancelButtonAction(actionEvent));\n        recipeLikeImg.setOnMouseClicked(mouseEvent -> handleClickOnLike());\n        recipeUsername.setOnMouseClicked(mouseEvent -> handleClickOnUsername(mouseEvent));\n    }\n\n    private void handleClickOnLike()\n    {\n        if(neo4jDriver.isThisRecipeLikedByOne(recipeTitle.getText(),appSession.getLoggedUser().getUsername()))\n        {\n            neo4jDriver.unlike(appSession.getLoggedUser().getUsername(),recipeTitle.getText());\n            recipeLikeImg.setImage(new Image(\"img/like.png\"));\n        }\n        else\n        {\n            neo4jDriver.like(appSession.getLoggedUser().getUsername(),recipeTitle.getText());\n            recipeLikeImg.setImage(new Image(\"img/alreadyliked.png\"));\n        }\n\n        recipeLikes.setText(String.valueOf(neo4jDriver.howManyLikes(recipeTitle.getText())));\n    }\n\n    /**\n     * Function who handle the adding comments, and upload on mongoDB\n     * @param actionEvent pressing the button\n     */\n    private void handleSendButtonAction(ActionEvent actionEvent){\n        if(commentsArea.getText().equals(\"\")) {\n            Utils.showErrorAlert(\"No Comments in the CommentsArea\");\n            return;\n        }\n//        System.out.println(recipe.getComments());\n//        System.out.println(recipe.getTitle());\n        Comment comment = new Comment(appSession.getLoggedUser().getUsername(), commentsArea.getText(), new Date());\n        if(recipe.getComments() != null)\n            recipe.addComments(comment);\n        else{\n            List<Comment> comments= new ArrayList<>();\n            comments.add(comment);\n            recipe.setComments(comments);\n        }\n        Utils.showComment(recipeVBox, comment);\n//        System.out.println(recipe.getComments());\n        mongoDBDriver.updateComments(recipe.getTitle(), recipe.getComments());\n    }\n\n    /**\n     * Cancelling the comment textArea by clicking on the cancel Button\n     * @param actionEvent pressing the button\n     */\n    private void handleCancelButtonAction(ActionEvent actionEvent){\n        if(!commentsArea.getText().equals(\"\")) commentsArea.setText(\"\");\n    }\n\n    /**\n     * Setters for the recipe, in which we also set the correct value to show\n     * @param r    Recipe to show\n     */\n    public void setRecipe(Recipe r) {\n        this.recipe = r;\n        recipeTitle.setText(recipe.getTitle());\n        recipeInstructions.setText(recipe.getInstructions());\n        if (recipe.getPicture() != null)\n        {\n            recipePicture.setImage(new Image(recipe.getPicture()));\n        }\n        else\n        {\n            recipePicture.setImage(new Image(\"img/genericRecipe.png\"));\n        }\n        recipeUsername.setText(recipe.getAuthorUsername());\n        recipeCarbs.setText(String.valueOf(recipe.getCarbs()));\n        recipeCalories.setText(String.valueOf(recipe.getCalories()));\n        recipeFat.setText(String.valueOf(recipe.getFat()));\n        recipeProtein.setText(String.valueOf(recipe.getProtein()));\n        recipeCategories.setText(Utils.fromListToString(recipe.getCategories()));\n        recipeIngredients.setText(Utils.fromListToString(recipe.getIngredients()));\n        recipeDate.setText(\"Published on: \" + Utils.fromDateToString(recipe.getCreationTime()));\n        //TO DO\n        recipeLikes.setText(String.valueOf(neo4jDriver.howManyLikes(recipe.getTitle())));\n        if(neo4jDriver.isThisRecipeLikedByOne(recipe.getTitle(),appSession.getLoggedUser().getUsername()))\n            recipeLikeImg.setImage(new Image(\"img/alreadyliked.png\"));\n\n        if(recipe.getComments() != null) {\n            Label commentsTitle = new Label(\"Comments:\");\n            commentsTitle.setFont(Font.font(24));\n            recipeVBox.getChildren().add(commentsTitle);\n            Utils.showComments(recipeVBox, recipe.getComments());\n        }\n//        List<Comment> comments = new ArrayList<>();\n//        comments.add(new Comment(\"Pippo\", \"Hello World!\", new Date()));\n//        comments.add(new Comment(\"Pluto\", \"Fantastic recipe!\", new Date()));\n//        recipe.setComments(comments);\n//        if (comments != null)\n//        {\n//            Label commentsTitle = new Label(\"Comments:\");\n//            commentsTitle.setFont(Font.font(24));\n//            recipeVBox.getChildren().add(commentsTitle);\n//            Utils.showComments(recipeVBox, recipe.getComments());\n//        }\n\n        if(appSession.getLoggedUser().getRole()!=2 && !appSession.getLoggedUser().getUsername().equals(recipe.getAuthorUsername()))\n            recipeDelete.setVisible(false);\n        else\n            recipeDelete.setOnMouseClicked(mouseEvent -> neo4jDriver.deleteRecipe(recipe.getTitle(),recipe.getCreationTime()));\n    }\n\n    /**\n     * Function used to handle the click on the homepage icon\n     * @param mouseEvent    event that represents the click on the icon\n     */\n    private void clickOnHomepageToChangePage(MouseEvent mouseEvent){\n        HomePageController homePageController = (HomePageController)\n                Utils.changeScene(\"/homepage.fxml\", mouseEvent);\n    }\n\n    /**\n     * Function used to handle the click on the recipe's owner\n     * @param mouseEvent    event that represents the click on the recipe's owner\n     */\n    private void handleClickOnUsername(MouseEvent mouseEvent){\n        ProfilePageController profilePageController = (ProfilePageController)\n                Utils.changeScene(\"/profilePage.fxml\", mouseEvent);\n        profilePageController.setProfile(neo4jDriver.getUserByUsername(recipeUsername.getText()));\n    }\n\n    /**\n     * Function used to handle the click on the profile icon\n     * @param mouseEvent    event that represents the click on the icon\n     */\n    private void clickOnProfileToChangePage(MouseEvent mouseEvent){\n        ProfilePageController profilePageController = (ProfilePageController)\n                Utils.changeScene(\"/profilePage.fxml\", mouseEvent);\n        profilePageController.setProfile(Session.getInstance().getLoggedUser());\n    }\n\n    /**\n     * Function used to handle the click on the discovery icon\n     * @param mouseEvent    event that represents the click on the icon\n     */\n    private void clickOnDiscoveryToChangePage(MouseEvent mouseEvent){\n        DiscoveryPageController discoveryPageController = (DiscoveryPageController)\n                Utils.changeScene(\"/discoveryPage.fxml\", mouseEvent);\n    }\n\n    /**\n     * Function that let the logout action, by going into the welcome page\n     * @param mouseEvent event that represents the click on the icon\n     */\n    private void clickOnLogoutImg(MouseEvent mouseEvent){\n        try {\n            WelcomePageController welcomePageController = (WelcomePageController)\n                    Utils.changeScene(\"/welcome.fxml\", mouseEvent);\n        }catch (NullPointerException n){System.out.println(\"profilePageController is null!!!!\");}\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java
--- a/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/java/it/unipi/dii/inginf/lsdb/justrecipe/controller/RecipePageController.java	(date 1608575537853)
@@ -1,5 +1,6 @@
 package it.unipi.dii.inginf.lsdb.justrecipe.controller;
 
+import com.fasterxml.jackson.core.JsonProcessingException;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Comment;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Recipe;
 import it.unipi.dii.inginf.lsdb.justrecipe.model.Session;
@@ -113,9 +114,11 @@
             comments.add(comment);
             recipe.setComments(comments);
         }
-        Utils.showComment(recipeVBox, comment);
+        Utils.showComment(recipeVBox, comment, recipe.getTitle());
 //        System.out.println(recipe.getComments());
-        mongoDBDriver.updateComments(recipe.getTitle(), recipe.getComments());
+            mongoDBDriver.addComment(recipe.getTitle(), comment);
+//        mongoDBDriver.updateComments(recipe.getTitle(), recipe.getComments());
+
     }
 
     /**
@@ -155,11 +158,11 @@
         if(neo4jDriver.isThisRecipeLikedByOne(recipe.getTitle(),appSession.getLoggedUser().getUsername()))
             recipeLikeImg.setImage(new Image("img/alreadyliked.png"));
 
-        if(recipe.getComments() != null) {
+        if(recipe.getComments() != null && recipe.getComments().size() != 0) {
             Label commentsTitle = new Label("Comments:");
             commentsTitle.setFont(Font.font(24));
             recipeVBox.getChildren().add(commentsTitle);
-            Utils.showComments(recipeVBox, recipe.getComments());
+            Utils.showComments(recipeVBox, recipe.getComments(), recipe.getTitle());
         }
 //        List<Comment> comments = new ArrayList<>();
 //        comments.add(new Comment("Pippo", "Hello World!", new Date()));
Index: src/main/resources/recipePage.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.ScrollPane?>\n<?import javafx.scene.control.TextArea?>\n<?import javafx.scene.effect.Blend?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.BorderPane?>\n<?import javafx.scene.layout.HBox?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.VBox?>\n<?import javafx.scene.shape.Line?>\n<?import javafx.scene.text.Font?>\n<?import javafx.scene.text.Text?>\n\n<VBox xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.RecipePageController\">\n   <children>\n      <BorderPane prefHeight=\"84.0\" style=\"-fx-background-color: rgb(237, 160, 66);\">\n         <effect>\n            <Blend />\n         </effect>\n         <left>\n            <ImageView fitHeight=\"81.0\" fitWidth=\"95.0\" pickOnBounds=\"true\" preserveRatio=\"true\" BorderPane.alignment=\"CENTER\">\n               <image>\n                  <Image url=\"@img/icon.png\" />\n               </image>\n               <BorderPane.margin>\n                  <Insets left=\"20.0\" />\n               </BorderPane.margin>\n            </ImageView>\n         </left>\n         <right>\n            <HBox alignment=\"CENTER\" prefHeight=\"84.0\" prefWidth=\"240.0\" BorderPane.alignment=\"CENTER\">\n               <children>\n                  <ImageView fx:id=\"logoutPic\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/exit.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n                  <ImageView fx:id=\"homeImg\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/home.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n                  <ImageView fx:id=\"discoveryImg\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/discovery.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n                  <ImageView fx:id=\"profileImg\" fitHeight=\"45.0\" fitWidth=\"45.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                     <image>\n                        <Image url=\"@img/user.png\" />\n                     </image>\n                     <HBox.margin>\n                        <Insets right=\"20.0\" />\n                     </HBox.margin>\n                  </ImageView>\n               </children>\n            </HBox>\n         </right>\n         <center>\n            <HBox alignment=\"CENTER_LEFT\" BorderPane.alignment=\"CENTER\" />\n         </center>\n      </BorderPane>\n      <ScrollPane hbarPolicy=\"NEVER\" vbarPolicy=\"ALWAYS\">\n         <content>\n            <HBox alignment=\"CENTER\" prefHeight=\"700.0\" prefWidth=\"1197.0\" style=\"-fx-background-color: RGB(204, 199, 194);\">\n               <opaqueInsets>\n                  <Insets />\n               </opaqueInsets>\n               <children>\n                  <ScrollPane hbarPolicy=\"NEVER\" prefWidth=\"772.0\" style=\"-fx-background-color: white;\" vbarPolicy=\"NEVER\">\n                     <content>\n                        <VBox fx:id=\"recipeVBox\" maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefWidth=\"770.0\" spacing=\"20.0\" style=\"-fx-background-color: white;\">\n                           <children>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <Text fx:id=\"recipeTitle\" focusTraversable=\"true\" layoutX=\"20.0\" layoutY=\"66.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Tiramisu\" wrappingWidth=\"725.0\">\n                                       <font>\n                                          <Font size=\"46.0\" />\n                                       </font>\n                                    </Text>\n                                 </children>\n                              </Pane>\n                              <HBox prefHeight=\"247.0\" prefWidth=\"770.0\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefHeight=\"250.0\" prefWidth=\"260.0\">\n                                       <children>\n                                          <ImageView fx:id=\"recipePicture\" fitHeight=\"208.0\" fitWidth=\"232.0\" layoutX=\"35.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/genericRecipe.png\" />\n                                             </image>\n                                          </ImageView>\n                                       </children>\n                                    </Pane>\n                                    <Pane prefHeight=\"250.0\" prefWidth=\"199.0\">\n                                       <children>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/user.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Text fx:id=\"recipeUsername\" layoutX=\"48.0\" layoutY=\"29.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Username\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"46.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/carbs.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"88.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/calories.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"136.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/fat.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Text fx:id=\"recipeCarbs\" layoutX=\"55.0\" layoutY=\"75.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"30\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <Text fx:id=\"recipeCalories\" layoutX=\"55.0\" layoutY=\"124.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"20\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <Text fx:id=\"recipeFat\" layoutX=\"55.0\" layoutY=\"165.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"40\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <ImageView fitHeight=\"40.0\" fitWidth=\"40.0\" layoutY=\"179.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/protein1.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Text fx:id=\"recipeProtein\" layoutX=\"55.0\" layoutY=\"208.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"50\">\n                                             <font>\n                                                <Font size=\"22.0\" />\n                                             </font>\n                                          </Text>\n                                          <Line endY=\"-38.0\" layoutX=\"178.0\" layoutY=\"51.0\" startY=\"167.0\" />\n                                       </children>\n                                    </Pane>\n                                    <Pane prefHeight=\"240.0\" prefWidth=\"318.0\">\n                                       <children>\n                                          <ImageView fx:id=\"recipeLikeImg\" fitHeight=\"40.0\" fitWidth=\"54.0\" layoutX=\"14.0\" layoutY=\"60.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/like.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <ImageView fx:id=\"recipeEditImg\" fitHeight=\"40.0\" fitWidth=\"70.0\" layoutX=\"17.0\" layoutY=\"114.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/edit.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Label layoutX=\"14.0\" layoutY=\"23.0\" text=\"Like:\">\n                                             <font>\n                                                <Font size=\"15.0\" />\n                                             </font>\n                                          </Label>\n                                          <Label fx:id=\"recipeDate\" layoutX=\"110.0\" layoutY=\"23.0\" text=\"Published on:\">\n                                             <font>\n                                                <Font size=\"15.0\" />\n                                             </font>\n                                          </Label>\n                                          <ImageView fx:id=\"recipeDelete\" fitHeight=\"40.0\" fitWidth=\"200.0\" layoutX=\"14.0\" layoutY=\"173.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                             <image>\n                                                <Image url=\"@img/delete.png\" />\n                                             </image>\n                                          </ImageView>\n                                          <Label fx:id=\"recipeLikes\" layoutX=\"54.0\" layoutY=\"23.0\" text=\"x\">\n                                             <font>\n                                                <Font size=\"15.0\" />\n                                             </font>\n                                          </Label>\n                                       </children>\n                                    </Pane>\n                                 </children>\n                                 <padding>\n                                    <Insets top=\"20.0\" />\n                                 </padding>\n                              </HBox>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefWidth=\"770.0\" style=\"-fx-background-color: white;\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <ImageView fitHeight=\"84.0\" fitWidth=\"78.0\" layoutX=\"20.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                       <image>\n                                          <Image url=\"@img/ingredients1.png\" />\n                                       </image>\n                                    </ImageView>\n                                    <Text fx:id=\"recipeIngredients\" layoutX=\"114.0\" layoutY=\"45.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"uova, mascarpone, ingr1, ingr2, ingr3, ingr4, ingr5\" wrappingWidth=\"600.0\">\n                                       <font>\n                                          <Font size=\"15.0\" />\n                                       </font>\n                                    </Text>\n                                 </children>\n                                 <VBox.margin>\n                                    <Insets bottom=\"5.0\" />\n                                 </VBox.margin>\n                              </Pane>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefWidth=\"770.0\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <Text fx:id=\"recipeInstructions\" layoutX=\"23.0\" layoutY=\"20.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"Anticamente le nonne usavano preparare una colazione che oggi potremmo definirepovera, ma che all’epoca era davvero ricchissima! Ancora oggi la ricetta è immutata,basta rompere in un bicchiere un uovo freschissimo e sbatterlo con dello zucchero ea piacere aggiungere caffè o latte caldo, per i più piccoli, e marsala o anice per i piùgrandicelli. Ed è proprio da questa portentosa crema che nasce la crema al mascarponebase del tiramisù. Il dolce italiano per eccellenza, quello più famoso e amato,ma soprattutto che ha dato vita a tantissime altre versioni, anche tiramisù senza uova!Poi il tiramisù alle fragole o quello alla Nutella, giusto per citarne un paio!Senza contare le rivisitazioni più raffinate come la crostata morbida o la torta al tiramisù.\" wrappingWidth=\"725.0\" />\n                                 </children>\n                                 <VBox.margin>\n                                    <Insets />\n                                 </VBox.margin>\n                              </Pane>\n                              <Pane maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" VBox.vgrow=\"ALWAYS\">\n                                 <children>\n                                    <ImageView fitHeight=\"71.0\" fitWidth=\"63.0\" layoutX=\"35.0\" layoutY=\"9.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n                                       <image>\n                                          <Image url=\"@img/tag.png\" />\n                                       </image>\n                                    </ImageView>\n                                    <Text fx:id=\"recipeCategories\" layoutX=\"117.0\" layoutY=\"37.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"italian, dolce, prova, ciao, mascarpone\" wrappingWidth=\"600.0\">\n                                       <font>\n                                          <Font size=\"15.0\" />\n                                       </font>\n                                    </Text>\n                                 </children>\n                                 <opaqueInsets>\n                                    <Insets />\n                                 </opaqueInsets>\n                                 <VBox.margin>\n                                    <Insets bottom=\"20.0\" />\n                                 </VBox.margin>\n                              </Pane>\n                              <Pane prefHeight=\"200.0\" prefWidth=\"200.0\">\n                                 <children>\n                                    <TextArea fx:id=\"commentsArea\" focusTraversable=\"false\" layoutX=\"29.0\" layoutY=\"39.0\" prefHeight=\"106.0\" prefWidth=\"723.0\" />\n                                    <Label layoutX=\"282.0\" layoutY=\"9.0\" text=\"Write a comment:\">\n                                       <font>\n                                          <Font size=\"24.0\" />\n                                       </font>\n                                    </Label>\n                                    <Button fx:id=\"sendButton\" layoutX=\"701.0\" layoutY=\"160.0\" mnemonicParsing=\"false\" text=\"Send\" />\n                                    <Button fx:id=\"cancelButton\" layoutX=\"624.0\" layoutY=\"160.0\" mnemonicParsing=\"false\" text=\"Cancel\" />\n                                 </children>\n                              </Pane>\n                           </children>\n                        </VBox>\n                     </content>\n                  </ScrollPane>\n               </children>\n            </HBox>\n         </content>\n      </ScrollPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/recipePage.fxml b/src/main/resources/recipePage.fxml
--- a/src/main/resources/recipePage.fxml	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/resources/recipePage.fxml	(date 1608576076133)
@@ -112,9 +112,9 @@
                                                 <Image url="@img/user.png" />
                                              </image>
                                           </ImageView>
-                                          <Text fx:id="recipeUsername" layoutX="48.0" layoutY="29.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Username">
+                                          <Text fx:id="recipeUsername" layoutX="48.0" layoutY="29.0" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-font-weight: bold;" text="Username">
                                              <font>
-                                                <Font size="22.0" />
+                                                <Font size="20.0" />
                                              </font>
                                           </Text>
                                           <ImageView fitHeight="40.0" fitWidth="40.0" layoutY="46.0" pickOnBounds="true" preserveRatio="true">
Index: src/main/resources/comment.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Button?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.control.TextArea?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.layout.VBox?>\n\n<VBox maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefWidth=\"600.0\" style=\"-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;\" xmlns=\"http://javafx.com/javafx/11.0.1\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController\">\n   <children>\n      <AnchorPane prefHeight=\"41.0\" prefWidth=\"600.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <Label fx:id=\"commentDate\" layoutX=\"26.0\" layoutY=\"12.0\" text=\"Written at: Tue Feb 25 17:11:26 \" />\n            <Label fx:id=\"commentUsername\" alignment=\"CENTER_RIGHT\" layoutX=\"456.0\" layoutY=\"12.0\" text=\"By: Username\" textAlignment=\"RIGHT\" />\n         </children>\n         <VBox.margin>\n            <Insets />\n         </VBox.margin>\n      </AnchorPane>\n      <Pane prefWidth=\"200.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <TextArea fx:id=\"commentTextArea\" layoutX=\"26.0\" layoutY=\"7.0\" prefHeight=\"89.0\" prefWidth=\"547.0\" style=\"-fx-focus-color: orange;\" text=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.&#10; \" wrapText=\"true\" />\n         </children>\n      </Pane>\n      <AnchorPane prefHeight=\"69.0\" prefWidth=\"600.0\" VBox.vgrow=\"ALWAYS\">\n         <children>\n            <Button fx:id=\"commentModifyButton\" layoutX=\"27.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" text=\"Modify\" />\n            <Button fx:id=\"commentDeleteButton\" layoutX=\"522.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" text=\"Delete\" />\n            <Button fx:id=\"commentSaveButton\" layoutX=\"90.0\" layoutY=\"17.0\" mnemonicParsing=\"false\" prefHeight=\"25.0\" prefWidth=\"54.0\" text=\"Save\" />\n         </children>\n      </AnchorPane>\n   </children>\n</VBox>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/comment.fxml b/src/main/resources/comment.fxml
--- a/src/main/resources/comment.fxml	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/resources/comment.fxml	(date 1608559619679)
@@ -8,7 +8,7 @@
 <?import javafx.scene.layout.Pane?>
 <?import javafx.scene.layout.VBox?>
 
-<VBox maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefWidth="600.0" style="-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController">
+<VBox fx:id="commentVBox" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefWidth="600.0" style="-fx-border-color: orange; -fx-border-radius: 10px; -fx-background-position: center; -fx-border-style: solid; -fx-border-image-width: 3px; -fx-background-color: white;" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.CommentController">
    <children>
       <AnchorPane prefHeight="41.0" prefWidth="600.0" VBox.vgrow="ALWAYS">
          <children>
Index: ../RecipeReader/src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.fasterxml.jackson.core.*;\nimport com.fasterxml.jackson.databind.*;\nimport com.google.gson.Gson;\nimport com.mongodb.client.*;\nimport org.bson.Document;\nimport org.neo4j.driver.*;\n\nimport java.io.IOException;\nimport java.nio.file.*;\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static int HOW_MANY_RECIPES_TO_REMOVE = 30000;\n    public static String PATH_FULL_FORMAT_RECIPES = \"/home/fraie/Documenti/DatasetLSDB/full_format_recipes.json\";\n    public static String PATH_RECIPES_RAW_NOSOURCE_FN = \"/home/fraie/Documenti/DatasetLSDB/recipes_raw_nosource_fn.json\";\n\n    private static MongoClient mongoClient;\n    private static MongoDatabase database;\n    private static MongoCollection collection;\n    private static Driver driver;\n\n    public static void main (String[] arg)\n    {\n        mongoClient = MongoClients.create();\n        database = mongoClient.getDatabase(\"justrecipe\");\n        collection = database.getCollection(\"recipe\");\n\n        driver = GraphDatabase.driver( \"neo4j://localhost:7687\", AuthTokens.basic( \"neo4j\", \"justrecipe\" ) );\n\n        // First of all It is useful to remove the old values (if they exists)\n        // Just for re-execute the algorithm without problem\n        collection.drop();\n        deleteAllGraph();\n\n        List<RecipeRaw> rawRecipes = new ArrayList<>();\n        addRecipes_full_format(rawRecipes, PATH_FULL_FORMAT_RECIPES);\n        addRecipes_raw(rawRecipes, PATH_RECIPES_RAW_NOSOURCE_FN);\n\n        //I have removed the last HOW_MANY_RECIPES_TO_REMOVE recipes, that are the ones that have not so much information\n        rawRecipes.subList(rawRecipes.size() - HOW_MANY_RECIPES_TO_REMOVE, rawRecipes.size()).clear();\n\n        // Remove the recipe with title == null (filter (...)) and remove the duplicates (distinct())\n        List<RecipeRaw> recipesWithoutDuplicates = rawRecipes.stream().filter(new Predicate<RecipeRaw>() {\n            @Override\n            public boolean test(RecipeRaw recipeRaw) {\n                if (recipeRaw.getTitle() != null)\n                    return true;\n                return false;\n            }\n        }).distinct().collect(Collectors.toList());\n\n        // This reverse is used to insert the recipe with more information in the tail,\n        // so they will be the last insert\n        Collections.reverse(recipesWithoutDuplicates);\n\n        // List of users present at the initial time of the application\n        List<User> users = new ArrayList<>();\n        users.add(new User(\"Oliver\", \"Smith\", \"oliver.smith\", \"oliver.smith\"));\n        users.add(new User(\"Jack\", \"Jones\", \"jack.jones\", \"jack.jones\"));\n        users.add(new User(\"Harry\", \"Williams\", \"harry.williams\", \"harry.williams\"));\n        users.add(new User(\"Jacob\", \"Brown\", \"jacob.brown\", \"jacob.brown\"));\n        users.add(new User(\"Charlie\", \"Taylor\", \"charlie.taylor\", \"charlie.taylor\"));\n        users.add(new User(\"Thomas\", \"Davies\", \"thomas.davies\", \"thomas.davies\"));\n        users.add(new User(\"George\", \"Wilson\", \"george.wilson\", \"george.wilson\"));\n        users.add(new User(\"Oscar\", \"Evans\", \"oscar.evans\", \"oscar.evans\"));\n        users.add(new User(\"James\", \"Thomas\", \"james.thomas\", \"james.thomas\"));\n        users.add(new User(\"William\", \"Roberts\", \"william.roberts\", \"william.roberts\"));\n        users.add(new User(\"Amelia\", \"Murphy\", \"amelia.murphy\", \"amelia.murphy\"));\n        users.add(new User(\"Olivia\", \"Johnson\", \"olivia.johnson\", \"olivia.johnson\"));\n        users.add(new User(\"Isla\", \"Williams\", \"isla.williams\", \"isla.williams\"));\n        users.add(new User(\"Emily\", \"Walsh\", \"emily.walsh\", \"emily.walsh\"));\n        users.add(new User(\"Poppy\", \"Taylor\", \"poppy.taylor\", \"poppy.taylor\"));\n        users.add(new User(\"Ava\", \"Miller\", \"ava.miller\", \"ava.miller\"));\n        users.add(new User(\"Isabella\", \"Byrne\", \"isabella.byrne\", \"isabella.byrne\"));\n        users.add(new User(\"Jessica\", \"Evans\", \"jessica.evans\", \"jessica.evans\"));\n        users.add(new User(\"Lily\", \"Rodriguez\", \"lily.rodriguez\", \"lily.rodriguez\"));\n        users.add(new User(\"Sophie\", \"Roberts\", \"sophie.roberts\", \"sophie.roberts\"));\n\n        // First I insert the user, because when i choose randomly i can't be sure\n        // that they will be all pick-up, so i need to be sure that they are all present\n        // So, instead of adding the users in the insertRecipesAndUsers function, i have created another one function\n        addUsers(users);\n        insertRecipesOfUsers(recipesWithoutDuplicates, users);\n        \n        System.out.println(collection.countDocuments()); //How many documents loaded\n        mongoClient.close();\n        driver.close();\n    }\n\n    /**\n     * Add recipes from raw dataset\n     * @param recipes\n     * @param path\n     */\n    public static void addRecipes_raw (List<RecipeRaw> recipes, String path)\n    {\n        Gson gson = new Gson();\n        JsonFactory factory = new JsonFactory();\n        ObjectMapper mapper = new ObjectMapper(factory);\n        JsonNode rootNode = null;\n        try {\n            rootNode = mapper.readTree(Files.readAllBytes(Paths.get(path)));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Iterator<Map.Entry<String,JsonNode>> fieldsIterator = rootNode.fields();\n        while (fieldsIterator.hasNext()) {\n            Map.Entry<String,JsonNode> field = fieldsIterator.next();\n            //The key is the unknow ID, the value is the recipe\n            recipes.add(gson.fromJson(field.getValue().toString(), RecipeRaw.class));\n        }\n    }\n\n    /**\n     * Add recipes from full_format dataset\n     * @param recipes\n     * @param path\n     */\n    public static void addRecipes_full_format (List<RecipeRaw> recipes, String path)\n    {\n        Gson gson = new Gson();\n        RecipeRaw[] recipeList = null;\n        StringBuilder contentBuilder = new StringBuilder();\n        try {\n            Files.lines(Paths.get(path)).forEach(s -> contentBuilder.append(s));\n            recipeList = gson.fromJson(contentBuilder.toString(), RecipeRaw[].class);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        Collections.addAll(recipes, recipeList);\n    }\n\n    /**\n     * Method that creates a new nodes in the graphDB with the information of the new users\n     * @param users      Users to add\n     */\n    public static void addUsers( final List<User> users)\n    {\n        Map<String,Object> params = new HashMap<>();\n        List<Map<String,Object>> list = new ArrayList<>();\n        for (User user: users)\n        {\n            Map<String,Object> props = new HashMap<>();\n            props.put( \"firstName\", user.getFirstName());\n            props.put( \"lastName\", user.getLastName());\n            props.put( \"username\", user.getUsername());\n            props.put( \"password\", user.getPassword());\n            list.add(props);\n        }\n        params.put( \"batch\", list );\n\n        try ( Session session = driver.session())\n        {\n            session.writeTransaction((TransactionWork<Void>) tx -> {\n                tx.run( \"UNWIND $batch AS row \" +\n                                \"MERGE (u:User {firstName: row.firstName, lastName: row.lastName, \" +\n                                \"username: row.username,\" +\n                                \"password: row.password, role:0})\",\n                        params);\n                return null;\n            });\n        }\n    }\n\n    /**\n     * Function that insert all the recipes, every one is associated at one user randomly picked\n     * @param recipeRaws    The list of the recipes\n     * @param users         The list of the users\n     */\n    public static void insertRecipesOfUsers (List<RecipeRaw> recipeRaws, List<User> users)\n    {\n        List<Document> documents = new ArrayList<Document>();\n        Date date = new Date();\n        Map<String,Object> params = new HashMap<>();\n        List<Map<String,Object>> list = new ArrayList<>();\n        Random random = new Random();\n        int i= 0;\n        for (RecipeRaw rawRecipe: recipeRaws) // For every recipe\n        {\n            // pick-up randomly a user to associate with this recipe\n            int userIndex = random.nextInt(users.size()); //[0,19]\n            User user = users.get(userIndex);\n\n            // MongoDB part\n            String title = rawRecipe.getTitle();\n            Document doc = new Document(\"title\", title);\n            if (rawRecipe.getInstructions() != null)\n            {\n                doc.append(\"instructions\", rawRecipe.getInstructions());\n            }\n            else if (rawRecipe.getDirections() != null) // this recipe has the directions\n            {\n                String instructions = \"\";\n                for (String s : rawRecipe.getDirections())\n                {\n                    instructions += s + \"\\n\";\n                }\n                doc.append(\"instructions\", instructions);\n            }\n            if (rawRecipe.getIngredients() != null)\n                doc.append(\"ingredients\", rawRecipe.getIngredients());\n            if (rawRecipe.getCategories() != null)\n                doc.append(\"categories\", rawRecipe.getCategories());\n            if (rawRecipe.getCalories() != 0)\n                doc.append(\"calories\", rawRecipe.getCalories());\n            if (rawRecipe.getFat() != 0)\n                doc.append(\"fat\", rawRecipe.getFat());\n            if (rawRecipe.getProtein() != 0)\n                doc.append(\"protein\", rawRecipe.getProtein());\n            if (rawRecipe.getCarbs() != 0)\n                doc.append(\"carbs\", rawRecipe.getCarbs());\n            // For the timestamp MongoDB use the \"Date\"\n            doc.append(\"creationTime\", new Date(date.getTime()+(1000*i)));\n            doc.append(\"authorUsername\", user.getUsername());\n            documents.add(doc);\n\n            // Neo4j part\n            Map<String,Object> props = new HashMap<>();\n            props.put( \"username\", user.getUsername());\n            props.put(\"timestamp\", new Date(date.getTime()+(1000*i)).getTime());\n            props.put(\"title\", rawRecipe.getTitle());\n            if (rawRecipe.getCalories() != 0)\n                props.put(\"calories\", rawRecipe.getCalories());\n            if (rawRecipe.getFat() != 0)\n                props.put(\"fat\", rawRecipe.getFat());\n            if (rawRecipe.getProtein() != 0)\n                props.put(\"protein\", rawRecipe.getProtein());\n            if (rawRecipe.getCarbs() != 0)\n                props.put(\"carbs\", rawRecipe.getCarbs());\n            list.add(props);\n\n            i++;\n        }\n\n        // Mongo insert\n        collection.insertMany(documents);\n\n        // Neo4j insert\n        params.put( \"batch\", list );\n        try ( Session session = driver.session())\n        {\n            session.writeTransaction((TransactionWork<Void>) tx -> {\n                // First step: find the right user\n                // Second step: create the path ADDS and the recipe\n                tx.run( \"UNWIND $batch AS row \" +\n                                \"MATCH (u:User {username: row.username}) \" +\n                                \"CREATE (u)-[:ADDS {when: row.timestamp}]->(r:Recipe {title: row.title, calories: row.calories, \" +\n                                \"fat: row.fat, protein: row.protein, carbs: row.carbs})\",\n                        params);\n                return null;\n            });\n        }\n    }\n\n    /**\n     * Function used to delete all the nodes and the edges of the graph\n     */\n    public static void deleteAllGraph ()\n    {\n        try ( Session session = driver.session())\n        {\n            session.writeTransaction((TransactionWork<Void>) tx -> {\n                tx.run( \"MATCH (n) DETACH DELETE n\");\n                return null;\n            });\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../RecipeReader/src/main/java/Main.java b/../RecipeReader/src/main/java/Main.java
--- a/../RecipeReader/src/main/java/Main.java	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/../RecipeReader/src/main/java/Main.java	(date 1608559619685)
@@ -13,8 +13,8 @@
 
 public class Main {
     public static int HOW_MANY_RECIPES_TO_REMOVE = 30000;
-    public static String PATH_FULL_FORMAT_RECIPES = "/home/fraie/Documenti/DatasetLSDB/full_format_recipes.json";
-    public static String PATH_RECIPES_RAW_NOSOURCE_FN = "/home/fraie/Documenti/DatasetLSDB/recipes_raw_nosource_fn.json";
+    public static String PATH_FULL_FORMAT_RECIPES = "/home/francesco/Scaricati/full_format_recipes/full_format_recipes.json";
+    public static String PATH_RECIPES_RAW_NOSOURCE_FN = "/home/francesco/Scaricati/recipes_raw/recipes_raw_nosource_fn.json";
 
     private static MongoClient mongoClient;
     private static MongoDatabase database;
Index: src/main/resources/welcome.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import com.jfoenix.controls.JFXButton?>\n<?import com.jfoenix.controls.JFXPasswordField?>\n<?import com.jfoenix.controls.JFXTextField?>\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.BorderPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.shape.Line?>\n<?import javafx.scene.text.Text?>\n\n<BorderPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.WelcomePageController\">\n   <left>\n      <AnchorPane prefHeight=\"400.0\" prefWidth=\"230.0\" style=\"-fx-background-color: #cacfcb;\" BorderPane.alignment=\"CENTER\">\n         <children>\n            <ImageView fitHeight=\"150.0\" fitWidth=\"200.0\" layoutX=\"44.0\" layoutY=\"50.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n               <image>\n                  <Image url=\"@/img/icon.png\" />\n               </image>\n            </ImageView>\n            <Text layoutX=\"16.0\" layoutY=\"254.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"For more information contact us!\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n            <Text layoutX=\"16.0\" layoutY=\"288.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"f.campilongo@studenti.unipi.it\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n            <Text layoutX=\"16.0\" layoutY=\"305.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"d.cioffo@studenti.unipi.it\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n            <Text layoutX=\"16.0\" layoutY=\"322.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"f.iemma1@studenti.unipi.it\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n         </children></AnchorPane>\n   </left>\n   <right>\n      <BorderPane prefHeight=\"400.0\" prefWidth=\"443.0\" BorderPane.alignment=\"CENTER\">\n         <top>\n            <Pane prefHeight=\"163.0\" prefWidth=\"380.0\" BorderPane.alignment=\"CENTER\">\n               <children>\n                  <Label layoutX=\"72.0\" layoutY=\"39.0\" text=\"Username\" />\n                  <Label layoutX=\"74.0\" layoutY=\"73.0\" text=\"Password\" />\n                  <JFXTextField fx:id=\"usernameLoginTextField\" layoutX=\"197.0\" layoutY=\"27.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXPasswordField fx:id=\"passwordLoginTextField\" layoutX=\"196.0\" layoutY=\"61.0\" prefHeight=\"25.0\" prefWidth=\"150.0\" />\n                  <JFXButton fx:id=\"loginButton\" layoutX=\"301.0\" layoutY=\"116.0\" style=\"-fx-background-color: grey;\" text=\"Login\" textFill=\"WHITE\" />\n                  <Line endX=\"100.0\" layoutX=\"196.0\" layoutY=\"163.0\" startX=\"-100.0\" strokeLineCap=\"ROUND\" />\n               </children>\n            </Pane>\n         </top>\n         <bottom>\n            <Pane prefHeight=\"237.0\" prefWidth=\"380.0\" BorderPane.alignment=\"CENTER\">\n               <BorderPane.margin>\n                  <Insets />\n               </BorderPane.margin>\n               <children>\n                  <Label layoutX=\"72.0\" layoutY=\"29.0\" text=\"First name\" />\n                  <Label layoutX=\"72.0\" layoutY=\"63.0\" text=\"Last name\" />\n                  <Label layoutX=\"72.0\" layoutY=\"96.0\" text=\"Username\" />\n                  <Label layoutX=\"72.0\" layoutY=\"129.0\" text=\"Password\" />\n                  <Label layoutX=\"72.0\" layoutY=\"161.0\" text=\"Confirm password\" />\n                  <JFXButton fx:id=\"registrationButton\" layoutX=\"286.0\" layoutY=\"200.0\" style=\"-fx-background-color: grey;\" text=\"Register\" textFill=\"WHITE\" />\n                  <JFXTextField fx:id=\"firstNameRegistrationTextField\" layoutX=\"197.0\" layoutY=\"17.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXTextField fx:id=\"lastNameRegistrationTextField\" layoutX=\"197.0\" layoutY=\"51.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXTextField fx:id=\"usernameRegistrationTextField\" layoutX=\"197.0\" layoutY=\"84.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXPasswordField fx:id=\"passwordRegistrationTextField\" layoutX=\"196.0\" layoutY=\"117.0\" prefHeight=\"25.0\" prefWidth=\"150.0\" />\n                  <JFXPasswordField fx:id=\"confirmPasswordRegistrationTextField\" layoutX=\"196.0\" layoutY=\"149.0\" prefHeight=\"25.0\" prefWidth=\"150.0\" />\n               </children>\n            </Pane>\n         </bottom>\n      </BorderPane>\n   </right>\n</BorderPane>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/welcome.fxml b/src/main/resources/welcome.fxml
--- a/src/main/resources/welcome.fxml	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/src/main/resources/welcome.fxml	(date 1608559776585)
@@ -13,7 +13,7 @@
 <?import javafx.scene.shape.Line?>
 <?import javafx.scene.text.Text?>
 
-<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.WelcomePageController">
+<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.WelcomePageController">
    <left>
       <AnchorPane prefHeight="400.0" prefWidth="230.0" style="-fx-background-color: #cacfcb;" BorderPane.alignment="CENTER">
          <children>
Index: target/classes/welcome.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<?import com.jfoenix.controls.JFXButton?>\n<?import com.jfoenix.controls.JFXPasswordField?>\n<?import com.jfoenix.controls.JFXTextField?>\n<?import javafx.geometry.Insets?>\n<?import javafx.scene.control.Label?>\n<?import javafx.scene.image.Image?>\n<?import javafx.scene.image.ImageView?>\n<?import javafx.scene.layout.AnchorPane?>\n<?import javafx.scene.layout.BorderPane?>\n<?import javafx.scene.layout.Pane?>\n<?import javafx.scene.shape.Line?>\n<?import javafx.scene.text.Text?>\n\n<BorderPane maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"it.unipi.dii.inginf.lsdb.justrecipe.controller.WelcomePageController\">\n   <left>\n      <AnchorPane prefHeight=\"400.0\" prefWidth=\"230.0\" style=\"-fx-background-color: #cacfcb;\" BorderPane.alignment=\"CENTER\">\n         <children>\n            <ImageView fitHeight=\"150.0\" fitWidth=\"200.0\" layoutX=\"44.0\" layoutY=\"50.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\n               <image>\n                  <Image url=\"@/img/icon.png\" />\n               </image>\n            </ImageView>\n            <Text layoutX=\"16.0\" layoutY=\"254.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"For more information contact us!\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n            <Text layoutX=\"16.0\" layoutY=\"288.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"f.campilongo@studenti.unipi.it\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n            <Text layoutX=\"16.0\" layoutY=\"305.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"d.cioffo@studenti.unipi.it\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n            <Text layoutX=\"16.0\" layoutY=\"322.0\" strokeType=\"OUTSIDE\" strokeWidth=\"0.0\" text=\"f.iemma1@studenti.unipi.it\" textAlignment=\"CENTER\" wrappingWidth=\"187.13671875\" />\n         </children></AnchorPane>\n   </left>\n   <right>\n      <BorderPane prefHeight=\"400.0\" prefWidth=\"443.0\" BorderPane.alignment=\"CENTER\">\n         <top>\n            <Pane prefHeight=\"163.0\" prefWidth=\"380.0\" BorderPane.alignment=\"CENTER\">\n               <children>\n                  <Label layoutX=\"72.0\" layoutY=\"39.0\" text=\"Username\" />\n                  <Label layoutX=\"74.0\" layoutY=\"73.0\" text=\"Password\" />\n                  <JFXTextField fx:id=\"usernameLoginTextField\" layoutX=\"197.0\" layoutY=\"27.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXPasswordField fx:id=\"passwordLoginTextField\" layoutX=\"196.0\" layoutY=\"61.0\" prefHeight=\"25.0\" prefWidth=\"150.0\" />\n                  <JFXButton fx:id=\"loginButton\" layoutX=\"301.0\" layoutY=\"116.0\" style=\"-fx-background-color: grey;\" text=\"Login\" textFill=\"WHITE\" />\n                  <Line endX=\"100.0\" layoutX=\"196.0\" layoutY=\"163.0\" startX=\"-100.0\" strokeLineCap=\"ROUND\" />\n               </children>\n            </Pane>\n         </top>\n         <bottom>\n            <Pane prefHeight=\"237.0\" prefWidth=\"380.0\" BorderPane.alignment=\"CENTER\">\n               <BorderPane.margin>\n                  <Insets />\n               </BorderPane.margin>\n               <children>\n                  <Label layoutX=\"72.0\" layoutY=\"29.0\" text=\"First name\" />\n                  <Label layoutX=\"72.0\" layoutY=\"63.0\" text=\"Last name\" />\n                  <Label layoutX=\"72.0\" layoutY=\"96.0\" text=\"Username\" />\n                  <Label layoutX=\"72.0\" layoutY=\"129.0\" text=\"Password\" />\n                  <Label layoutX=\"72.0\" layoutY=\"161.0\" text=\"Confirm password\" />\n                  <JFXButton fx:id=\"registrationButton\" layoutX=\"286.0\" layoutY=\"200.0\" style=\"-fx-background-color: grey;\" text=\"Register\" textFill=\"WHITE\" />\n                  <JFXTextField fx:id=\"firstNameRegistrationTextField\" layoutX=\"197.0\" layoutY=\"17.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXTextField fx:id=\"lastNameRegistrationTextField\" layoutX=\"197.0\" layoutY=\"51.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXTextField fx:id=\"usernameRegistrationTextField\" layoutX=\"197.0\" layoutY=\"84.0\" prefHeight=\"25.0\" prefWidth=\"148.0\" />\n                  <JFXPasswordField fx:id=\"passwordRegistrationTextField\" layoutX=\"196.0\" layoutY=\"117.0\" prefHeight=\"25.0\" prefWidth=\"150.0\" />\n                  <JFXPasswordField fx:id=\"confirmPasswordRegistrationTextField\" layoutX=\"196.0\" layoutY=\"149.0\" prefHeight=\"25.0\" prefWidth=\"150.0\" />\n               </children>\n            </Pane>\n         </bottom>\n      </BorderPane>\n   </right>\n</BorderPane>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/target/classes/welcome.fxml b/target/classes/welcome.fxml
--- a/target/classes/welcome.fxml	(revision bcbc5c6fec1c935f0108f39dfa37a35ea6a5d038)
+++ b/target/classes/welcome.fxml	(date 1608560417499)
@@ -13,7 +13,7 @@
 <?import javafx.scene.shape.Line?>
 <?import javafx.scene.text.Text?>
 
-<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.WelcomePageController">
+<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="it.unipi.dii.inginf.lsdb.justrecipe.controller.WelcomePageController">
    <left>
       <AnchorPane prefHeight="400.0" prefWidth="230.0" style="-fx-background-color: #cacfcb;" BorderPane.alignment="CENTER">
          <children>
